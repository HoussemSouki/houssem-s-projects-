
Audiocodec_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08005dd0  08005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c8  080061c8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080061d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000258  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   000126d9  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ee  00000000  00000000  00032711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00034e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef8  00000000  00000000  00035df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e51  00000000  00000000  00036cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d9e  00000000  00000000  00058b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce17a  00000000  00000000  0006c8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013aa59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c8  00000000  00000000  0013aaac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005db8 	.word	0x08005db8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08005db8 	.word	0x08005db8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <write_register+0x34>)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <write_register+0x34>)
 80004d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <write_register+0x34>)
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <write_register+0x38>)
 80004e6:	f002 f80d 	bl	8002504 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000024 	.word	0x20000024
 80004f8:	20000028 	.word	0x20000028

080004fc <read_register>:
// Function(2): Read from register
 void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <read_register+0x3c>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <read_register+0x3c>)
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <read_register+0x40>)
 800051a:	f001 fff3 	bl	8002504 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <read_register+0x40>)
 800052a:	f002 f8e9 	bl	8002700 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000024 	.word	0x20000024
 800053c:	20000028 	.word	0x20000028

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
 8000546:	f107 0c08 	add.w	ip, r7, #8
 800054a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b81      	ldr	r3, [pc, #516]	; (8000754 <CS43_Init+0x214>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b7f      	ldr	r3, [pc, #508]	; (8000754 <CS43_Init+0x214>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b7d      	ldr	r3, [pc, #500]	; (8000754 <CS43_Init+0x214>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000564:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	487b      	ldr	r0, [pc, #492]	; (8000758 <CS43_Init+0x218>)
 800056c:	f001 fe6c 	bl	8002248 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000570:	4b7a      	ldr	r3, [pc, #488]	; (800075c <CS43_Init+0x21c>)
 8000572:	4618      	mov	r0, r3
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	4619      	mov	r1, r3
 800057c:	f004 fe9a 	bl	80052b4 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000580:	4b77      	ldr	r3, [pc, #476]	; (8000760 <CS43_Init+0x220>)
 8000582:	2201      	movs	r2, #1
 8000584:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000586:	4976      	ldr	r1, [pc, #472]	; (8000760 <CS43_Init+0x220>)
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff99 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058e:	4b74      	ldr	r3, [pc, #464]	; (8000760 <CS43_Init+0x220>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	4b72      	ldr	r3, [pc, #456]	; (8000760 <CS43_Init+0x220>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b70      	ldr	r3, [pc, #448]	; (8000760 <CS43_Init+0x220>)
 80005a0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a2:	4b6f      	ldr	r3, [pc, #444]	; (8000760 <CS43_Init+0x220>)
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <CS43_Init+0x220>)
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b0:	4b6b      	ldr	r3, [pc, #428]	; (8000760 <CS43_Init+0x220>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0303 	orr.w	r3, r3, #3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <CS43_Init+0x220>)
 80005bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	4969      	ldr	r1, [pc, #420]	; (8000764 <CS43_Init+0x224>)
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ff7d 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005c6:	4b66      	ldr	r3, [pc, #408]	; (8000760 <CS43_Init+0x220>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005cc:	4965      	ldr	r1, [pc, #404]	; (8000764 <CS43_Init+0x224>)
 80005ce:	2005      	movs	r0, #5
 80005d0:	f7ff ff76 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005d4:	4962      	ldr	r1, [pc, #392]	; (8000760 <CS43_Init+0x220>)
 80005d6:	2006      	movs	r0, #6
 80005d8:	f7ff ff90 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005dc:	4b60      	ldr	r3, [pc, #384]	; (8000760 <CS43_Init+0x220>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <CS43_Init+0x220>)
 80005e8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <CS43_Init+0x220>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <CS43_Init+0x220>)
 80005f6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <CS43_Init+0x220>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b57      	ldr	r3, [pc, #348]	; (8000760 <CS43_Init+0x220>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <CS43_Init+0x220>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f023 0310 	bic.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b53      	ldr	r3, [pc, #332]	; (8000760 <CS43_Init+0x220>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <CS43_Init+0x220>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0304 	bic.w	r3, r3, #4
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b50      	ldr	r3, [pc, #320]	; (8000760 <CS43_Init+0x220>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <CS43_Init+0x220>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <CS43_Init+0x220>)
 800062e:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <CS43_Init+0x220>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	f043 0303 	orr.w	r3, r3, #3
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <CS43_Init+0x220>)
 800063c:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800063e:	4949      	ldr	r1, [pc, #292]	; (8000764 <CS43_Init+0x224>)
 8000640:	2006      	movs	r0, #6
 8000642:	f7ff ff3d 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000646:	4947      	ldr	r1, [pc, #284]	; (8000764 <CS43_Init+0x224>)
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff57 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <CS43_Init+0x220>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	f023 030f 	bic.w	r3, r3, #15
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b41      	ldr	r3, [pc, #260]	; (8000760 <CS43_Init+0x220>)
 800065a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800065c:	4b40      	ldr	r3, [pc, #256]	; (8000760 <CS43_Init+0x220>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <CS43_Init+0x220>)
 8000668:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800066a:	493e      	ldr	r1, [pc, #248]	; (8000764 <CS43_Init+0x224>)
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff27 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000672:	493c      	ldr	r1, [pc, #240]	; (8000764 <CS43_Init+0x224>)
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff ff41 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800067a:	4b39      	ldr	r3, [pc, #228]	; (8000760 <CS43_Init+0x220>)
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	f023 030f 	bic.w	r3, r3, #15
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <CS43_Init+0x220>)
 8000686:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <CS43_Init+0x220>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <CS43_Init+0x220>)
 8000694:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000696:	4933      	ldr	r1, [pc, #204]	; (8000764 <CS43_Init+0x224>)
 8000698:	2009      	movs	r0, #9
 800069a:	f7ff ff11 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800069e:	4931      	ldr	r1, [pc, #196]	; (8000764 <CS43_Init+0x224>)
 80006a0:	200e      	movs	r0, #14
 80006a2:	f7ff ff2b 	bl	80004fc <read_register>
	if(outputMode == MODE_ANALOG_43)
 80006a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d123      	bne.n	80006f6 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <CS43_Init+0x220>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <CS43_Init+0x220>)
 80006ba:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <CS43_Init+0x220>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <CS43_Init+0x220>)
 80006c8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <CS43_Init+0x220>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	f023 0320 	bic.w	r3, r3, #32
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <CS43_Init+0x220>)
 80006d6:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <CS43_Init+0x220>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	f023 0310 	bic.w	r3, r3, #16
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <CS43_Init+0x220>)
 80006e4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <CS43_Init+0x220>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <CS43_Init+0x220>)
 80006f2:	705a      	strb	r2, [r3, #1]
 80006f4:	e006      	b.n	8000704 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80006f6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <CS43_Init+0x220>)
 8000700:	2202      	movs	r2, #2
 8000702:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000704:	4917      	ldr	r1, [pc, #92]	; (8000764 <CS43_Init+0x224>)
 8000706:	200e      	movs	r0, #14
 8000708:	f7ff feda 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <CS43_Init+0x224>)
 800070e:	200f      	movs	r0, #15
 8000710:	f7ff fef4 	bl	80004fc <read_register>
	iData[1] = 0x00;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <CS43_Init+0x220>)
 8000716:	2200      	movs	r2, #0
 8000718:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800071a:	4912      	ldr	r1, [pc, #72]	; (8000764 <CS43_Init+0x224>)
 800071c:	200f      	movs	r0, #15
 800071e:	f7ff fecf 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <CS43_Init+0x220>)
 8000724:	2200      	movs	r2, #0
 8000726:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000728:	490e      	ldr	r1, [pc, #56]	; (8000764 <CS43_Init+0x224>)
 800072a:	2014      	movs	r0, #20
 800072c:	f7ff fec8 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <CS43_Init+0x224>)
 8000732:	2015      	movs	r0, #21
 8000734:	f7ff fec4 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000738:	490a      	ldr	r1, [pc, #40]	; (8000764 <CS43_Init+0x224>)
 800073a:	201a      	movs	r0, #26
 800073c:	f7ff fec0 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000740:	4908      	ldr	r1, [pc, #32]	; (8000764 <CS43_Init+0x224>)
 8000742:	201b      	movs	r0, #27
 8000744:	f7ff febc 	bl	80004c0 <write_register>
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000750:	b004      	add	sp, #16
 8000752:	4770      	bx	lr
 8000754:	200001cc 	.word	0x200001cc
 8000758:	40020c00 	.word	0x40020c00
 800075c:	20000028 	.word	0x20000028
 8000760:	20000024 	.word	0x20000024
 8000764:	20000025 	.word	0x20000025

08000768 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d837      	bhi.n	80007e8 <CS43_Enable_RightLeft+0x80>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <CS43_Enable_RightLeft+0x18>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000791 	.word	0x08000791
 8000784:	080007a7 	.word	0x080007a7
 8000788:	080007bd 	.word	0x080007bd
 800078c:	080007d3 	.word	0x080007d3
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a2:	705a      	strb	r2, [r3, #1]
			break;
 80007a4:	e021      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007b8:	705a      	strb	r2, [r3, #1]
			break;
 80007ba:	e016      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007be:	22c0      	movs	r2, #192	; 0xc0
 80007c0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ce:	705a      	strb	r2, [r3, #1]
			break;
 80007d0:	e00b      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007e4:	705a      	strb	r2, [r3, #1]
			break;
 80007e6:	e000      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007e8:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	f043 030c 	orr.w	r3, r3, #12
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007f6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	f043 0303 	orr.w	r3, r3, #3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000804:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000806:	4905      	ldr	r1, [pc, #20]	; (800081c <CS43_Enable_RightLeft+0xb4>)
 8000808:	2004      	movs	r0, #4
 800080a:	f7ff fe59 	bl	80004c0 <write_register>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000024 	.word	0x20000024
 800081c:	20000025 	.word	0x20000025

08000820 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	3b32      	subs	r3, #50	; 0x32
 800082e:	b2db      	uxtb	r3, r3
 8000830:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <CS43_SetVolume+0x78>)
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000844:	4915      	ldr	r1, [pc, #84]	; (800089c <CS43_SetVolume+0x7c>)
 8000846:	2014      	movs	r0, #20
 8000848:	f7ff fe3a 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800084c:	4913      	ldr	r1, [pc, #76]	; (800089c <CS43_SetVolume+0x7c>)
 800084e:	2015      	movs	r0, #21
 8000850:	f7ff fe36 	bl	80004c0 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b64      	cmp	r3, #100	; 0x64
 8000858:	d80e      	bhi.n	8000878 <CS43_SetVolume+0x58>
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <CS43_SetVolume+0x80>)
 8000866:	fb82 1203 	smull	r1, r2, r2, r3
 800086a:	1152      	asrs	r2, r2, #5
 800086c:	17db      	asrs	r3, r3, #31
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3b18      	subs	r3, #24
 8000874:	b2db      	uxtb	r3, r3
 8000876:	e000      	b.n	800087a <CS43_SetVolume+0x5a>
 8000878:	2318      	movs	r3, #24
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <CS43_SetVolume+0x78>)
 800087c:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800087e:	4907      	ldr	r1, [pc, #28]	; (800089c <CS43_SetVolume+0x7c>)
 8000880:	2020      	movs	r0, #32
 8000882:	f7ff fe1d 	bl	80004c0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <CS43_SetVolume+0x7c>)
 8000888:	2021      	movs	r0, #33	; 0x21
 800088a:	f7ff fe19 	bl	80004c0 <write_register>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000024 	.word	0x20000024
 800089c:	20000025 	.word	0x20000025
 80008a0:	51eb851f 	.word	0x51eb851f

080008a4 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <CS43_Start+0x7c>)
 80008aa:	2299      	movs	r2, #153	; 0x99
 80008ac:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008ae:	491d      	ldr	r1, [pc, #116]	; (8000924 <CS43_Start+0x80>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fe05 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <CS43_Start+0x7c>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008bc:	4919      	ldr	r1, [pc, #100]	; (8000924 <CS43_Start+0x80>)
 80008be:	2047      	movs	r0, #71	; 0x47
 80008c0:	f7ff fdfe 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c4:	4917      	ldr	r1, [pc, #92]	; (8000924 <CS43_Start+0x80>)
 80008c6:	2032      	movs	r0, #50	; 0x32
 80008c8:	f7ff fe18 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <CS43_Start+0x7c>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <CS43_Start+0x7c>)
 80008d8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008da:	4912      	ldr	r1, [pc, #72]	; (8000924 <CS43_Start+0x80>)
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fdef 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008e2:	4910      	ldr	r1, [pc, #64]	; (8000924 <CS43_Start+0x80>)
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <CS43_Start+0x7c>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <CS43_Start+0x7c>)
 80008f6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f8:	490a      	ldr	r1, [pc, #40]	; (8000924 <CS43_Start+0x80>)
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde0 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <CS43_Start+0x7c>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000906:	4907      	ldr	r1, [pc, #28]	; (8000924 <CS43_Start+0x80>)
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fdd9 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <CS43_Start+0x7c>)
 8000910:	229e      	movs	r2, #158	; 0x9e
 8000912:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	4903      	ldr	r1, [pc, #12]	; (8000924 <CS43_Start+0x80>)
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fdd2 	bl	80004c0 <write_register>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000024 	.word	0x20000024
 8000924:	20000025 	.word	0x20000025

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b093      	sub	sp, #76	; 0x4c
 800092c:	af12      	add	r7, sp, #72	; 0x48
    // Initialize filter coefficients (replace these with actual coefficients)

    r_a0 =  0.0365f;
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <main+0x98>)
 8000930:	4a24      	ldr	r2, [pc, #144]	; (80009c4 <main+0x9c>)
 8000932:	601a      	str	r2, [r3, #0]
    r_a1 = 0.07314f;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <main+0xa0>)
 8000936:	4a25      	ldr	r2, [pc, #148]	; (80009cc <main+0xa4>)
 8000938:	601a      	str	r2, [r3, #0]
    r_a2 = 0.03657f;
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <main+0xa8>)
 800093c:	4a25      	ldr	r2, [pc, #148]	; (80009d4 <main+0xac>)
 800093e:	601a      	str	r2, [r3, #0]
    r_b1 = -1.3908f;
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <main+0xb0>)
 8000942:	4a26      	ldr	r2, [pc, #152]	; (80009dc <main+0xb4>)
 8000944:	601a      	str	r2, [r3, #0]
    r_b2 = 0.53719f;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0xb8>)
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <main+0xbc>)
 800094a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN 1 */

sample_dt = F_OUT/F_SAMPLE;
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <main+0xc0>)
 800094e:	4a27      	ldr	r2, [pc, #156]	; (80009ec <main+0xc4>)
 8000950:	601a      	str	r2, [r3, #0]
sample_n = F_SAMPLE/F_OUT;
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <main+0xc8>)
 8000954:	2232      	movs	r2, #50	; 0x32
 8000956:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fd72 	bl	8001440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f854 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 f9ae 	bl	8000cc0 <MX_GPIO_Init>
  MX_DAC_Init();
 8000964:	f000 f8ba 	bl	8000adc <MX_DAC_Init>
  MX_I2C1_Init();
 8000968:	f000 f8e2 	bl	8000b30 <MX_I2C1_Init>
  MX_I2S3_Init();
 800096c:	f000 f90e 	bl	8000b8c <MX_I2S3_Init>
  MX_DMA_Init();
 8000970:	f000 f986 	bl	8000c80 <MX_DMA_Init>
  MX_TIM2_Init();
 8000974:	f000 f938 	bl	8000be8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

 CS43_Init(hi2c1,MODE_ANALOG_43);
 8000978:	4c1e      	ldr	r4, [pc, #120]	; (80009f4 <main+0xcc>)
 800097a:	2301      	movs	r3, #1
 800097c:	9311      	str	r3, [sp, #68]	; 0x44
 800097e:	4668      	mov	r0, sp
 8000980:	f104 0310 	add.w	r3, r4, #16
 8000984:	2244      	movs	r2, #68	; 0x44
 8000986:	4619      	mov	r1, r3
 8000988:	f004 fc94 	bl	80052b4 <memcpy>
 800098c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000990:	f7ff fdd6 	bl	8000540 <CS43_Init>
 CS43_SetVolume(50);
 8000994:	2032      	movs	r0, #50	; 0x32
 8000996:	f7ff ff43 	bl	8000820 <CS43_SetVolume>
 CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 800099a:	2003      	movs	r0, #3
 800099c:	f7ff fee4 	bl	8000768 <CS43_Enable_RightLeft>
 CS43_Start();
 80009a0:	f7ff ff80 	bl	80008a4 <CS43_Start>


HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)dummy, 4);
 80009a4:	2204      	movs	r2, #4
 80009a6:	4914      	ldr	r1, [pc, #80]	; (80009f8 <main+0xd0>)
 80009a8:	4814      	ldr	r0, [pc, #80]	; (80009fc <main+0xd4>)
 80009aa:	f002 fd3d 	bl	8003428 <HAL_I2S_Transmit_DMA>

HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 80009ae:	2100      	movs	r1, #0
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <main+0xd8>)
 80009b2:	f000 fe77 	bl	80016a4 <HAL_DAC_Start>
HAL_TIM_Base_Start(&htim2);
 80009b6:	4813      	ldr	r0, [pc, #76]	; (8000a04 <main+0xdc>)
 80009b8:	f003 ffbe 	bl	8004938 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <main+0x94>
 80009be:	bf00      	nop
 80009c0:	20000080 	.word	0x20000080
 80009c4:	3d158106 	.word	0x3d158106
 80009c8:	20000140 	.word	0x20000140
 80009cc:	3d95ca6d 	.word	0x3d95ca6d
 80009d0:	200001c0 	.word	0x200001c0
 80009d4:	3d15ca6d 	.word	0x3d15ca6d
 80009d8:	2000007c 	.word	0x2000007c
 80009dc:	bfb205bc 	.word	0xbfb205bc
 80009e0:	200001bc 	.word	0x200001bc
 80009e4:	3f098549 	.word	0x3f098549
 80009e8:	200001c8 	.word	0x200001c8
 80009ec:	3ca3d70a 	.word	0x3ca3d70a
 80009f0:	200001c4 	.word	0x200001c4
 80009f4:	20000084 	.word	0x20000084
 80009f8:	200001b4 	.word	0x200001b4
 80009fc:	200001cc 	.word	0x200001cc
 8000a00:	20000144 	.word	0x20000144
 8000a04:	2000016c 	.word	0x2000016c

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2230      	movs	r2, #48	; 0x30
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 fc5a 	bl	80052d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a27      	ldr	r2, [pc, #156]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a86:	2307      	movs	r3, #7
 8000a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0320 	add.w	r3, r7, #32
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 f930 	bl	8003cf4 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a9a:	f000 fa53 	bl	8000f44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2105      	movs	r1, #5
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fb91 	bl	80041e4 <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ac8:	f000 fa3c 	bl	8000f44 <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3750      	adds	r7, #80	; 0x50
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_DAC_Init+0x4c>)
 8000aec:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <MX_DAC_Init+0x50>)
 8000aee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_DAC_Init+0x4c>)
 8000af2:	f000 fdb5 	bl	8001660 <HAL_DAC_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000afc:	f000 fa22 	bl	8000f44 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_DAC_Init+0x4c>)
 8000b10:	f000 fe3f 	bl	8001792 <HAL_DAC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b1a:	f000 fa13 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000144 	.word	0x20000144
 8000b2c:	40007400 	.word	0x40007400

08000b30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b36:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <MX_I2C1_Init+0x54>)
 8000b38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b3c:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_I2C1_Init+0x58>)
 8000b3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b6e:	f001 fb85 	bl	800227c <HAL_I2C_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b78:	f000 f9e4 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000084 	.word	0x20000084
 8000b84:	40005400 	.word	0x40005400
 8000b88:	000186a0 	.word	0x000186a0

08000b8c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_I2S3_Init+0x54>)
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <MX_I2S3_Init+0x58>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_I2S3_Init+0x54>)
 8000b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_I2S3_Init+0x54>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_I2S3_Init+0x54>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_I2S3_Init+0x54>)
 8000bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_I2S3_Init+0x54>)
 8000bb4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bb8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_I2S3_Init+0x54>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_I2S3_Init+0x54>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_I2S3_Init+0x54>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_I2S3_Init+0x54>)
 8000bce:	f002 faeb 	bl	80031a8 <HAL_I2S_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bd8:	f000 f9b4 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200001cc 	.word	0x200001cc
 8000be4:	40003c00 	.word	0x40003c00

08000be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c0e:	2253      	movs	r2, #83	; 0x53
 8000c10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c1a:	2213      	movs	r2, #19
 8000c1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c2a:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c2c:	f003 fe34 	bl	8004898 <HAL_TIM_Base_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000c36:	f000 f985 	bl	8000f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c48:	f004 f856 	bl	8004cf8 <HAL_TIM_ConfigClockSource>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000c52:	f000 f977 	bl	8000f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c56:	2320      	movs	r3, #32
 8000c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c64:	f004 fa72 	bl	800514c <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c6e:	f000 f969 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000016c 	.word	0x2000016c

08000c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_DMA_Init+0x3c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <MX_DMA_Init+0x3c>)
 8000c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_DMA_Init+0x3c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2010      	movs	r0, #16
 8000ca8:	f000 fcb0 	bl	800160c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cac:	2010      	movs	r0, #16
 8000cae:	f000 fcc9 	bl	8001644 <HAL_NVIC_EnableIRQ>

}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a30      	ldr	r2, [pc, #192]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d68:	4815      	ldr	r0, [pc, #84]	; (8000dc0 <MX_GPIO_Init+0x100>)
 8000d6a:	f001 fa6d 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2110      	movs	r1, #16
 8000d72:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <MX_GPIO_Init+0x104>)
 8000d74:	f001 fa68 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d78:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <MX_GPIO_Init+0x100>)
 8000d92:	f001 f8bd 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d96:	2310      	movs	r3, #16
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_GPIO_Init+0x104>)
 8000dae:	f001 f8af 	bl	8001f10 <HAL_GPIO_Init>

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020c00 	.word	0x40020c00
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(htim->Instance == TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	f040 808d 	bne.w	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x12e>
  {
	mySinval = sinf(I_t * 2 * PI * sample_dt);
 8000ddc:	4b48      	ldr	r3, [pc, #288]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dea:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000f04 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8000dee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000df2:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000df4:	edd3 7a00 	vldr	s15, [r3]
 8000df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000e00:	f004 fa6e 	bl	80052e0 <sinf>
 8000e04:	eef0 7a40 	vmov.f32	s15, s0
 8000e08:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e0a:	edc3 7a00 	vstr	s15, [r3]
	myDacValu = (mySinval + 1) * 127 ;
 8000e0e:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e1c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000f10 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e28:	ee17 2a90 	vmov	r2, s15
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e2e:	601a      	str	r2, [r3, #0]

    /* Apply low-pass IIR filter to the sine wave */
    float inSampleF = (float)myDacValu;
 8000e30:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e3c:	edc7 7a05 	vstr	s15, [r7, #20]
    float outSampleF =
        r_a0 * inSampleF +
 8000e40:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000e42:	ed93 7a00 	vldr	s14, [r3]
 8000e46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
        r_a1 * rin_z1 +
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e50:	edd3 6a00 	vldr	s13, [r3]
 8000e54:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
        r_a0 * inSampleF +
 8000e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
        r_a2 * rin_z2 +
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000e64:	edd3 6a00 	vldr	s13, [r3]
 8000e68:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
        r_a1 * rin_z1 +
 8000e72:	ee37 7a27 	vadd.f32	s14, s14, s15
        r_b1 * rout_z1 +
 8000e76:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e78:	edd3 6a00 	vldr	s13, [r3]
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000e7e:	edd3 7a00 	vldr	s15, [r3]
 8000e82:	ee66 7aa7 	vmul.f32	s15, s13, s15
        r_a2 * rin_z2 +
 8000e86:	ee37 7a27 	vadd.f32	s14, s14, s15
        r_b2 * rout_z2;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000e8c:	edd3 6a00 	vldr	s13, [r3]
 8000e90:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000e92:	edd3 7a00 	vldr	s15, [r3]
 8000e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float outSampleF =
 8000e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9e:	edc7 7a04 	vstr	s15, [r7, #16]

    rin_z2 = rin_z1;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a20      	ldr	r2, [pc, #128]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000ea8:	6013      	str	r3, [r2, #0]
    rin_z1 = inSampleF;
 8000eaa:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	6013      	str	r3, [r2, #0]
    rout_z2 = rout_z1;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000eb6:	6013      	str	r3, [r2, #0]
    rout_z1 = outSampleF;
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	6013      	str	r3, [r2, #0]

    /* Convert filtered sample to 12-bit DAC value */
    uint16_t filteredDacValue = (uint16_t)outSampleF;
 8000ebe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ec6:	ee17 3a90 	vmov	r3, s15
 8000eca:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1,DAC_ALIGN_8B_R,filteredDacValue );
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	2208      	movs	r2, #8
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	481a      	ldr	r0, [pc, #104]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000ed4:	f000 fc38 	bl	8001748 <HAL_DAC_SetValue>

	I_t++;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	if(I_t >= sample_n) I_t=0 ;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ee6:	881a      	ldrh	r2, [r3, #0]
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d302      	bcc.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x12e>
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	801a      	strh	r2, [r3, #0]
  }


}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000160 	.word	0x20000160
 8000f04:	40490fd0 	.word	0x40490fd0
 8000f08:	200001c8 	.word	0x200001c8
 8000f0c:	2000015c 	.word	0x2000015c
 8000f10:	42fe0000 	.word	0x42fe0000
 8000f14:	200000d8 	.word	0x200000d8
 8000f18:	20000080 	.word	0x20000080
 8000f1c:	20000140 	.word	0x20000140
 8000f20:	20000158 	.word	0x20000158
 8000f24:	200001c0 	.word	0x200001c0
 8000f28:	20000168 	.word	0x20000168
 8000f2c:	2000007c 	.word	0x2000007c
 8000f30:	200000dc 	.word	0x200000dc
 8000f34:	200001bc 	.word	0x200001bc
 8000f38:	20000164 	.word	0x20000164
 8000f3c:	20000144 	.word	0x20000144
 8000f40:	200001c4 	.word	0x200001c4

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <Error_Handler+0x8>
	...

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f8e:	2007      	movs	r0, #7
 8000f90:	f000 fb31 	bl	80015f6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <HAL_DAC_MspInit+0x7c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d127      	bne.n	8001012 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_DAC_MspInit+0x80>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <HAL_DAC_MspInit+0x80>)
 8000fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <HAL_DAC_MspInit+0x80>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_DAC_MspInit+0x80>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_DAC_MspInit+0x80>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_DAC_MspInit+0x80>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffe:	2303      	movs	r3, #3
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_DAC_MspInit+0x84>)
 800100e:	f000 ff7f 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40007400 	.word	0x40007400
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a19      	ldr	r2, [pc, #100]	; (80010ac <HAL_I2C_MspInit+0x84>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d12c      	bne.n	80010a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_I2C_MspInit+0x88>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <HAL_I2C_MspInit+0x88>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_I2C_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001066:	f44f 7310 	mov.w	r3, #576	; 0x240
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106c:	2312      	movs	r3, #18
 800106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001078:	2304      	movs	r3, #4
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <HAL_I2C_MspInit+0x8c>)
 8001084:	f000 ff44 	bl	8001f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_I2C_MspInit+0x88>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_I2C_MspInit+0x88>)
 8001092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_I2C_MspInit+0x88>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40005400 	.word	0x40005400
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020400 	.word	0x40020400

080010b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08e      	sub	sp, #56	; 0x38
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a4e      	ldr	r2, [pc, #312]	; (800121c <HAL_I2S_MspInit+0x164>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	f040 8095 	bne.w	8001214 <HAL_I2S_MspInit+0x15c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010ea:	2301      	movs	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80010ee:	23c0      	movs	r3, #192	; 0xc0
 80010f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fa8c 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001106:	f7ff ff1d 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <HAL_I2S_MspInit+0x168>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a43      	ldr	r2, [pc, #268]	; (8001220 <HAL_I2S_MspInit+0x168>)
 8001114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <HAL_I2S_MspInit+0x168>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <HAL_I2S_MspInit+0x168>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a3c      	ldr	r2, [pc, #240]	; (8001220 <HAL_I2S_MspInit+0x168>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <HAL_I2S_MspInit+0x168>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <HAL_I2S_MspInit+0x168>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a35      	ldr	r2, [pc, #212]	; (8001220 <HAL_I2S_MspInit+0x168>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <HAL_I2S_MspInit+0x168>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800115e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001170:	2306      	movs	r3, #6
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	482a      	ldr	r0, [pc, #168]	; (8001224 <HAL_I2S_MspInit+0x16c>)
 800117c:	f000 fec8 	bl	8001f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001192:	2306      	movs	r3, #6
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	4822      	ldr	r0, [pc, #136]	; (8001228 <HAL_I2S_MspInit+0x170>)
 800119e:	f000 feb7 	bl	8001f10 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011a4:	4a22      	ldr	r2, [pc, #136]	; (8001230 <HAL_I2S_MspInit+0x178>)
 80011a6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011b0:	2240      	movs	r2, #64	; 0x40
 80011b2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011e2:	2204      	movs	r2, #4
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011e8:	2203      	movs	r2, #3
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <HAL_I2S_MspInit+0x174>)
 80011fa:	f000 fb19 	bl	8001830 <HAL_DMA_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001204:	f7ff fe9e 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_I2S_MspInit+0x174>)
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_I2S_MspInit+0x174>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3738      	adds	r7, #56	; 0x38
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40003c00 	.word	0x40003c00
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000
 800122c:	200000e0 	.word	0x200000e0
 8001230:	40026088 	.word	0x40026088

08001234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001244:	d115      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_TIM_Base_MspInit+0x48>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <HAL_TIM_Base_MspInit+0x48>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_TIM_Base_MspInit+0x48>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	201c      	movs	r0, #28
 8001268:	f000 f9d0 	bl	800160c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800126c:	201c      	movs	r0, #28
 800126e:	f000 f9e9 	bl	8001644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	202d      	movs	r0, #45	; 0x2d
 8001296:	f000 f9b9 	bl	800160c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800129a:	202d      	movs	r0, #45	; 0x2d
 800129c:	f000 f9d2 	bl	8001644 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_InitTick+0xa4>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_InitTick+0xa4>)
 80012aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_InitTick+0xa4>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012bc:	f107 0210 	add.w	r2, r7, #16
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 f974 	bl	80045b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80012cc:	f003 f95e 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 80012d0:	4603      	mov	r3, r0
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	4a13      	ldr	r2, [pc, #76]	; (8001328 <HAL_InitTick+0xa8>)
 80012da:	fba2 2303 	umull	r2, r3, r2, r3
 80012de:	0c9b      	lsrs	r3, r3, #18
 80012e0:	3b01      	subs	r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_InitTick+0xac>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <HAL_InitTick+0xb0>)
 80012e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_InitTick+0xac>)
 80012ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012f0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_InitTick+0xac>)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_InitTick+0xac>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_InitTick+0xac>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <HAL_InitTick+0xac>)
 8001306:	f003 fac7 	bl	8004898 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d104      	bne.n	800131a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <HAL_InitTick+0xac>)
 8001312:	f003 fb79 	bl	8004a08 <HAL_TIM_Base_Start_IT>
 8001316:	4603      	mov	r3, r0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3730      	adds	r7, #48	; 0x30
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	431bde83 	.word	0x431bde83
 800132c:	20000214 	.word	0x20000214
 8001330:	40002000 	.word	0x40002000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <DMA1_Stream5_IRQHandler+0x10>)
 8001392:	f000 fb53 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000e0 	.word	0x200000e0

080013a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <TIM2_IRQHandler+0x10>)
 80013a6:	f003 fb9f 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000016c 	.word	0x2000016c

080013b4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80013ba:	f003 fb95 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000214 	.word	0x20000214

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001424 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013f2:	490e      	ldr	r1, [pc, #56]	; (800142c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013f4:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f8:	e002      	b.n	8001400 <LoopCopyDataInit>

080013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fe:	3304      	adds	r3, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001404:	d3f9      	bcc.n	80013fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001408:	4c0b      	ldr	r4, [pc, #44]	; (8001438 <LoopFillZerobss+0x26>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800140c:	e001      	b.n	8001412 <LoopFillZerobss>

0800140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001410:	3204      	adds	r2, #4

08001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001414:	d3fb      	bcc.n	800140e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001416:	f7ff ffd7 	bl	80013c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800141a:	f003 ff27 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800141e:	f7ff fa83 	bl	8000928 <main>
  bx  lr    
 8001422:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001430:	080061d0 	.word	0x080061d0
  ldr r2, =_sbss
 8001434:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001438:	20000260 	.word	0x20000260

0800143c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC_IRQHandler>
	...

08001440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_Init+0x40>)
 800144a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_Init+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_Init+0x40>)
 8001456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_Init+0x40>)
 8001462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001468:	2003      	movs	r0, #3
 800146a:	f000 f8c4 	bl	80015f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff ff06 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001474:	f7ff fd6c 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023c00 	.word	0x40023c00

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	2000025c 	.word	0x2000025c

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4907      	ldr	r1, [pc, #28]	; (8001538 <__NVIC_EnableIRQ+0x38>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff4c 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161e:	f7ff ff61 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001622:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	6978      	ldr	r0, [r7, #20]
 800162a:	f7ff ffb1 	bl	8001590 <NVIC_EncodePriority>
 800162e:	4602      	mov	r2, r0
 8001630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff80 	bl	800153c <__NVIC_SetPriority>
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff54 	bl	8001500 <__NVIC_EnableIRQ>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e014      	b.n	800169c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d105      	bne.n	8001688 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fc8c 	bl	8000fa0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	795b      	ldrb	r3, [r3, #5]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_DAC_Start+0x16>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e040      	b.n	800173c <HAL_DAC_Start+0x98>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2201      	movs	r2, #1
 80016d4:	409a      	lsls	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10f      	bne.n	8001704 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80016ee:	2b3c      	cmp	r3, #60	; 0x3c
 80016f0:	d11d      	bne.n	800172e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0201 	orr.w	r2, r2, #1
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	e014      	b.n	800172e <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	213c      	movs	r1, #60	; 0x3c
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	429a      	cmp	r2, r3
 800171c:	d107      	bne.n	800172e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0202 	orr.w	r2, r2, #2
 800172c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d105      	bne.n	8001772 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	3308      	adds	r3, #8
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e004      	b.n	800177c <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	3314      	adds	r3, #20
 800177a:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	461a      	mov	r2, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001792:	b480      	push	{r7}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	795b      	ldrb	r3, [r3, #5]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_DAC_ConfigChannel+0x18>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e03c      	b.n	8001824 <HAL_DAC_ConfigChannel+0x92>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2202      	movs	r2, #2
 80017b4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4013      	ands	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	22c0      	movs	r2, #192	; 0xc0
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43da      	mvns	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	400a      	ands	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2201      	movs	r2, #1
 800181a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff fe22 	bl	8001484 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e099      	b.n	8001980 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186c:	e00f      	b.n	800188e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800186e:	f7ff fe09 	bl	8001484 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b05      	cmp	r3, #5
 800187a:	d908      	bls.n	800188e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2220      	movs	r2, #32
 8001880:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2203      	movs	r2, #3
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e078      	b.n	8001980 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e8      	bne.n	800186e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	4b38      	ldr	r3, [pc, #224]	; (8001988 <HAL_DMA_Init+0x158>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4313      	orrs	r3, r2
 80018de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d107      	bne.n	80018f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	4313      	orrs	r3, r2
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f023 0307 	bic.w	r3, r3, #7
 800190e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4313      	orrs	r3, r2
 8001918:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	2b04      	cmp	r3, #4
 8001920:	d117      	bne.n	8001952 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00e      	beq.n	8001952 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fa6f 	bl	8001e18 <DMA_CheckFifoParam>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2240      	movs	r2, #64	; 0x40
 8001944:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800194e:	2301      	movs	r3, #1
 8001950:	e016      	b.n	8001980 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fa26 	bl	8001dac <DMA_CalcBaseAndBitshift>
 8001960:	4603      	mov	r3, r0
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	223f      	movs	r2, #63	; 0x3f
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	f010803f 	.word	0xf010803f

0800198c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_DMA_Start_IT+0x26>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e040      	b.n	8001a34 <HAL_DMA_Start_IT+0xa8>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d12f      	bne.n	8001a26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 f9b8 	bl	8001d50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	223f      	movs	r2, #63	; 0x3f
 80019e6:	409a      	lsls	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0216 	orr.w	r2, r2, #22
 80019fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0208 	orr.w	r2, r2, #8
 8001a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e005      	b.n	8001a32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a48:	4b92      	ldr	r3, [pc, #584]	; (8001c94 <HAL_DMA_IRQHandler+0x258>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a92      	ldr	r2, [pc, #584]	; (8001c98 <HAL_DMA_IRQHandler+0x25c>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0a9b      	lsrs	r3, r3, #10
 8001a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	2208      	movs	r2, #8
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01a      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2208      	movs	r2, #8
 8001a96:	409a      	lsls	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2201      	movs	r2, #1
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d012      	beq.n	8001ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2201      	movs	r2, #1
 8001acc:	409a      	lsls	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d012      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	2204      	movs	r2, #4
 8001b02:	409a      	lsls	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	f043 0204 	orr.w	r2, r3, #4
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	2210      	movs	r2, #16
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d043      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d03c      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2210      	movs	r2, #16
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d018      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d108      	bne.n	8001b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d024      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4798      	blx	r3
 8001b6a:	e01f      	b.n	8001bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01b      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
 8001b7c:	e016      	b.n	8001bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0208 	bic.w	r2, r2, #8
 8001b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 808e 	beq.w	8001cda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8086 	beq.w	8001cda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d136      	bne.n	8001c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0216 	bic.w	r2, r2, #22
 8001bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d103      	bne.n	8001c16 <HAL_DMA_IRQHandler+0x1da>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0208 	bic.w	r2, r2, #8
 8001c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2a:	223f      	movs	r2, #63	; 0x3f
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d07d      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4798      	blx	r3
        }
        return;
 8001c52:	e078      	b.n	8001d46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01c      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d108      	bne.n	8001c82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d030      	beq.n	8001cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	4798      	blx	r3
 8001c80:	e02b      	b.n	8001cda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d027      	beq.n	8001cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
 8001c92:	e022      	b.n	8001cda <HAL_DMA_IRQHandler+0x29e>
 8001c94:	20000000 	.word	0x20000000
 8001c98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10f      	bne.n	8001cca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0210 	bic.w	r2, r2, #16
 8001cb8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d032      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d022      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d307      	bcc.n	8001d22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f2      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x2ca>
 8001d20:	e000      	b.n	8001d24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d22:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
 8001d44:	e000      	b.n	8001d48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d46:	bf00      	nop
    }
  }
}
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop

08001d50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b40      	cmp	r3, #64	; 0x40
 8001d7c:	d108      	bne.n	8001d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d8e:	e007      	b.n	8001da0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	60da      	str	r2, [r3, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	3b10      	subs	r3, #16
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <DMA_CalcBaseAndBitshift+0x64>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dc6:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <DMA_CalcBaseAndBitshift+0x68>)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d909      	bls.n	8001dee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	1d1a      	adds	r2, r3, #4
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	659a      	str	r2, [r3, #88]	; 0x58
 8001dec:	e007      	b.n	8001dfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001df6:	f023 0303 	bic.w	r3, r3, #3
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	aaaaaaab 	.word	0xaaaaaaab
 8001e14:	08005de8 	.word	0x08005de8

08001e18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d11f      	bne.n	8001e72 <DMA_CheckFifoParam+0x5a>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d856      	bhi.n	8001ee6 <DMA_CheckFifoParam+0xce>
 8001e38:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <DMA_CheckFifoParam+0x28>)
 8001e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3e:	bf00      	nop
 8001e40:	08001e51 	.word	0x08001e51
 8001e44:	08001e63 	.word	0x08001e63
 8001e48:	08001e51 	.word	0x08001e51
 8001e4c:	08001ee7 	.word	0x08001ee7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d046      	beq.n	8001eea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e60:	e043      	b.n	8001eea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e6a:	d140      	bne.n	8001eee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e70:	e03d      	b.n	8001eee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7a:	d121      	bne.n	8001ec0 <DMA_CheckFifoParam+0xa8>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d837      	bhi.n	8001ef2 <DMA_CheckFifoParam+0xda>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <DMA_CheckFifoParam+0x70>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001e9f 	.word	0x08001e9f
 8001e90:	08001e99 	.word	0x08001e99
 8001e94:	08001eb1 	.word	0x08001eb1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e9c:	e030      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d025      	beq.n	8001ef6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eae:	e022      	b.n	8001ef6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eb8:	d11f      	bne.n	8001efa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ebe:	e01c      	b.n	8001efa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d903      	bls.n	8001ece <DMA_CheckFifoParam+0xb6>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d003      	beq.n	8001ed4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ecc:	e018      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed2:	e015      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00e      	beq.n	8001efe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee4:	e00b      	b.n	8001efe <DMA_CheckFifoParam+0xe6>
      break;
 8001ee6:	bf00      	nop
 8001ee8:	e00a      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;
 8001eea:	bf00      	nop
 8001eec:	e008      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;
 8001eee:	bf00      	nop
 8001ef0:	e006      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef2:	bf00      	nop
 8001ef4:	e004      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e002      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;   
 8001efa:	bf00      	nop
 8001efc:	e000      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;
 8001efe:	bf00      	nop
    }
  } 
  
  return status; 
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	e16b      	b.n	8002204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	f040 815a 	bne.w	80021fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d005      	beq.n	8001f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d130      	bne.n	8001fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 0201 	and.w	r2, r3, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d017      	beq.n	8002000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d123      	bne.n	8002054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	08da      	lsrs	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3208      	adds	r2, #8
 800204e:	69b9      	ldr	r1, [r7, #24]
 8002050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80b4 	beq.w	80021fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b60      	ldr	r3, [pc, #384]	; (800221c <HAL_GPIO_Init+0x30c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a5f      	ldr	r2, [pc, #380]	; (800221c <HAL_GPIO_Init+0x30c>)
 80020a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <HAL_GPIO_Init+0x30c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b2:	4a5b      	ldr	r2, [pc, #364]	; (8002220 <HAL_GPIO_Init+0x310>)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_GPIO_Init+0x314>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d02b      	beq.n	8002136 <HAL_GPIO_Init+0x226>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a51      	ldr	r2, [pc, #324]	; (8002228 <HAL_GPIO_Init+0x318>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d025      	beq.n	8002132 <HAL_GPIO_Init+0x222>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a50      	ldr	r2, [pc, #320]	; (800222c <HAL_GPIO_Init+0x31c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01f      	beq.n	800212e <HAL_GPIO_Init+0x21e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4f      	ldr	r2, [pc, #316]	; (8002230 <HAL_GPIO_Init+0x320>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d019      	beq.n	800212a <HAL_GPIO_Init+0x21a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4e      	ldr	r2, [pc, #312]	; (8002234 <HAL_GPIO_Init+0x324>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_GPIO_Init+0x216>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <HAL_GPIO_Init+0x328>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00d      	beq.n	8002122 <HAL_GPIO_Init+0x212>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4c      	ldr	r2, [pc, #304]	; (800223c <HAL_GPIO_Init+0x32c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d007      	beq.n	800211e <HAL_GPIO_Init+0x20e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4b      	ldr	r2, [pc, #300]	; (8002240 <HAL_GPIO_Init+0x330>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_GPIO_Init+0x20a>
 8002116:	2307      	movs	r3, #7
 8002118:	e00e      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800211a:	2308      	movs	r3, #8
 800211c:	e00c      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800211e:	2306      	movs	r3, #6
 8002120:	e00a      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002122:	2305      	movs	r3, #5
 8002124:	e008      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002126:	2304      	movs	r3, #4
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800212a:	2303      	movs	r3, #3
 800212c:	e004      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800212e:	2302      	movs	r3, #2
 8002130:	e002      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002136:	2300      	movs	r3, #0
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	4093      	lsls	r3, r2
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002148:	4935      	ldr	r1, [pc, #212]	; (8002220 <HAL_GPIO_Init+0x310>)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002156:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_GPIO_Init+0x334>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217a:	4a32      	ldr	r2, [pc, #200]	; (8002244 <HAL_GPIO_Init+0x334>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002180:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_GPIO_Init+0x334>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a4:	4a27      	ldr	r2, [pc, #156]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3301      	adds	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	f67f ae90 	bls.w	8001f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40021400 	.word	0x40021400
 800223c:	40021800 	.word	0x40021800
 8002240:	40021c00 	.word	0x40021c00
 8002244:	40013c00 	.word	0x40013c00

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002264:	e003      	b.n	800226e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	619a      	str	r2, [r3, #24]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e12b      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fec0 	bl	8001028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022e0:	f002 f954 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 80022e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a81      	ldr	r2, [pc, #516]	; (80024f0 <HAL_I2C_Init+0x274>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d807      	bhi.n	8002300 <HAL_I2C_Init+0x84>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a80      	ldr	r2, [pc, #512]	; (80024f4 <HAL_I2C_Init+0x278>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e006      	b.n	800230e <HAL_I2C_Init+0x92>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a7d      	ldr	r2, [pc, #500]	; (80024f8 <HAL_I2C_Init+0x27c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0e7      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a78      	ldr	r2, [pc, #480]	; (80024fc <HAL_I2C_Init+0x280>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9b      	lsrs	r3, r3, #18
 8002320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <HAL_I2C_Init+0x274>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d802      	bhi.n	8002350 <HAL_I2C_Init+0xd4>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	e009      	b.n	8002364 <HAL_I2C_Init+0xe8>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a69      	ldr	r2, [pc, #420]	; (8002500 <HAL_I2C_Init+0x284>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	3301      	adds	r3, #1
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002376:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	495c      	ldr	r1, [pc, #368]	; (80024f0 <HAL_I2C_Init+0x274>)
 8002380:	428b      	cmp	r3, r1
 8002382:	d819      	bhi.n	80023b8 <HAL_I2C_Init+0x13c>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e59      	subs	r1, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002398:	400b      	ands	r3, r1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_I2C_Init+0x138>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e59      	subs	r1, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	e051      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e04f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d111      	bne.n	80023e4 <HAL_I2C_Init+0x168>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e58      	subs	r0, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	440b      	add	r3, r1
 80023ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e012      	b.n	800240a <HAL_I2C_Init+0x18e>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	0099      	lsls	r1, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fa:	3301      	adds	r3, #1
 80023fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Init+0x196>
 800240e:	2301      	movs	r3, #1
 8002410:	e022      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10e      	bne.n	8002438 <HAL_I2C_Init+0x1bc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e58      	subs	r0, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	440b      	add	r3, r1
 8002428:	fbb0 f3f3 	udiv	r3, r0, r3
 800242c:	3301      	adds	r3, #1
 800242e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002436:	e00f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	0099      	lsls	r1, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	6809      	ldr	r1, [r1, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6911      	ldr	r1, [r2, #16]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	000186a0 	.word	0x000186a0
 80024f4:	001e847f 	.word	0x001e847f
 80024f8:	003d08ff 	.word	0x003d08ff
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	461a      	mov	r2, r3
 8002510:	460b      	mov	r3, r1
 8002512:	817b      	strh	r3, [r7, #10]
 8002514:	4613      	mov	r3, r2
 8002516:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7fe ffb4 	bl	8001484 <HAL_GetTick>
 800251c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b20      	cmp	r3, #32
 8002528:	f040 80e0 	bne.w	80026ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2319      	movs	r3, #25
 8002532:	2201      	movs	r2, #1
 8002534:	4970      	ldr	r1, [pc, #448]	; (80026f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fc58 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002542:	2302      	movs	r3, #2
 8002544:	e0d3      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_I2C_Master_Transmit+0x50>
 8002550:	2302      	movs	r3, #2
 8002552:	e0cc      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d007      	beq.n	800257a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002588:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2221      	movs	r2, #33	; 0x21
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2210      	movs	r2, #16
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	893a      	ldrh	r2, [r7, #8]
 80025aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a50      	ldr	r2, [pc, #320]	; (80026fc <HAL_I2C_Master_Transmit+0x1f8>)
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025bc:	8979      	ldrh	r1, [r7, #10]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fac2 	bl	8002b4c <I2C_MasterRequestWrite>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e08d      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025e8:	e066      	b.n	80026b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fcd2 	bl	8002f98 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d107      	bne.n	8002612 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e06b      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	781a      	ldrb	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b04      	cmp	r3, #4
 8002652:	d11b      	bne.n	800268c <HAL_I2C_Master_Transmit+0x188>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d017      	beq.n	800268c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	6a39      	ldr	r1, [r7, #32]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fcc2 	bl	800301a <I2C_WaitOnBTFFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d107      	bne.n	80026b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e01a      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d194      	bne.n	80025ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e000      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
  }
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	00100002 	.word	0x00100002
 80026fc:	ffff0000 	.word	0xffff0000

08002700 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	; 0x30
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	461a      	mov	r2, r3
 800270c:	460b      	mov	r3, r1
 800270e:	817b      	strh	r3, [r7, #10]
 8002710:	4613      	mov	r3, r2
 8002712:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002714:	f7fe feb6 	bl	8001484 <HAL_GetTick>
 8002718:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b20      	cmp	r3, #32
 8002724:	f040 820b 	bne.w	8002b3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2319      	movs	r3, #25
 800272e:	2201      	movs	r2, #1
 8002730:	497c      	ldr	r1, [pc, #496]	; (8002924 <HAL_I2C_Master_Receive+0x224>)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fb5a 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
 8002740:	e1fe      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_I2C_Master_Receive+0x50>
 800274c:	2302      	movs	r3, #2
 800274e:	e1f7      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d007      	beq.n	8002776 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0201 	orr.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002784:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2222      	movs	r2, #34	; 0x22
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2210      	movs	r2, #16
 8002792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	893a      	ldrh	r2, [r7, #8]
 80027a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a5c      	ldr	r2, [pc, #368]	; (8002928 <HAL_I2C_Master_Receive+0x228>)
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027b8:	8979      	ldrh	r1, [r7, #10]
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fa46 	bl	8002c50 <I2C_MasterRequestRead>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1b8      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d113      	bne.n	80027fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	623b      	str	r3, [r7, #32]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	623b      	str	r3, [r7, #32]
 80027ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e18c      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	2b01      	cmp	r3, #1
 8002804:	d11b      	bne.n	800283e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e16c      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	2b02      	cmp	r3, #2
 8002844:	d11b      	bne.n	800287e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002854:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	e14c      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800288c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028a4:	e138      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	f200 80f1 	bhi.w	8002a92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d123      	bne.n	8002900 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fbed 	bl	800309c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e139      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028fe:	e10b      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	2b02      	cmp	r3, #2
 8002906:	d14e      	bne.n	80029a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	2200      	movs	r2, #0
 8002910:	4906      	ldr	r1, [pc, #24]	; (800292c <HAL_I2C_Master_Receive+0x22c>)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fa6a 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e10e      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
 8002922:	bf00      	nop
 8002924:	00100002 	.word	0x00100002
 8002928:	ffff0000 	.word	0xffff0000
 800292c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029a4:	e0b8      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	2200      	movs	r2, #0
 80029ae:	4966      	ldr	r1, [pc, #408]	; (8002b48 <HAL_I2C_Master_Receive+0x448>)
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fa1b 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0bf      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	2200      	movs	r2, #0
 8002a0a:	494f      	ldr	r1, [pc, #316]	; (8002b48 <HAL_I2C_Master_Receive+0x448>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f9ed 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e091      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a90:	e042      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fb00 	bl	800309c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e04c      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d118      	bne.n	8002b18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f47f aec2 	bne.w	80028a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
  }
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	00010004 	.word	0x00010004

08002b4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d006      	beq.n	8002b76 <I2C_MasterRequestWrite+0x2a>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d003      	beq.n	8002b76 <I2C_MasterRequestWrite+0x2a>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b74:	d108      	bne.n	8002b88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e00b      	b.n	8002ba0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	2b12      	cmp	r3, #18
 8002b8e:	d107      	bne.n	8002ba0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f91d 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc6:	d103      	bne.n	8002bd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e035      	b.n	8002c40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bdc:	d108      	bne.n	8002bf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bec:	611a      	str	r2, [r3, #16]
 8002bee:	e01b      	b.n	8002c28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	11db      	asrs	r3, r3, #7
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 0306 	and.w	r3, r3, #6
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f063 030f 	orn	r3, r3, #15
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <I2C_MasterRequestWrite+0xfc>)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f943 	bl	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e010      	b.n	8002c40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c1e:	897b      	ldrh	r3, [r7, #10]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4907      	ldr	r1, [pc, #28]	; (8002c4c <I2C_MasterRequestWrite+0x100>)
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f933 	bl	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	00010008 	.word	0x00010008
 8002c4c:	00010002 	.word	0x00010002

08002c50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d006      	beq.n	8002c8a <I2C_MasterRequestRead+0x3a>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d003      	beq.n	8002c8a <I2C_MasterRequestRead+0x3a>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c88:	d108      	bne.n	8002c9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e00b      	b.n	8002cb4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	2b11      	cmp	r3, #17
 8002ca2:	d107      	bne.n	8002cb4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f893 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cda:	d103      	bne.n	8002ce4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e079      	b.n	8002ddc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf0:	d108      	bne.n	8002d04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	e05f      	b.n	8002dc4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d04:	897b      	ldrh	r3, [r7, #10]
 8002d06:	11db      	asrs	r3, r3, #7
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0306 	and.w	r3, r3, #6
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f063 030f 	orn	r3, r3, #15
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4930      	ldr	r1, [pc, #192]	; (8002de4 <I2C_MasterRequestRead+0x194>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f8b9 	bl	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e054      	b.n	8002ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4929      	ldr	r1, [pc, #164]	; (8002de8 <I2C_MasterRequestRead+0x198>)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f8a9 	bl	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e044      	b.n	8002ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f831 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9e:	d103      	bne.n	8002da8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e017      	b.n	8002ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002dac:	897b      	ldrh	r3, [r7, #10]
 8002dae:	11db      	asrs	r3, r3, #7
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 0306 	and.w	r3, r3, #6
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f063 030e 	orn	r3, r3, #14
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4907      	ldr	r1, [pc, #28]	; (8002de8 <I2C_MasterRequestRead+0x198>)
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f865 	bl	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	00010008 	.word	0x00010008
 8002de8:	00010002 	.word	0x00010002

08002dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dfc:	e025      	b.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d021      	beq.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e06:	f7fe fb3d 	bl	8001484 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d116      	bne.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e023      	b.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d10d      	bne.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf0c      	ite	eq
 8002e66:	2301      	moveq	r3, #1
 8002e68:	2300      	movne	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	e00c      	b.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d0b6      	beq.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ea8:	e051      	b.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb8:	d123      	bne.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ed2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e046      	b.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d021      	beq.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fe fabb 	bl	8001484 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d116      	bne.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e020      	b.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10c      	bne.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4013      	ands	r3, r2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf14      	ite	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	2300      	moveq	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	e00b      	b.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d18d      	bne.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa4:	e02d      	b.n	8003002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f8ce 	bl	8003148 <I2C_IsAcknowledgeFailed>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e02d      	b.n	8003012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d021      	beq.n	8003002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fe fa61 	bl	8001484 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d116      	bne.n	8003002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f043 0220 	orr.w	r2, r3, #32
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e007      	b.n	8003012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	d1ca      	bne.n	8002fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003026:	e02d      	b.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f88d 	bl	8003148 <I2C_IsAcknowledgeFailed>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e02d      	b.n	8003094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d021      	beq.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003040:	f7fe fa20 	bl	8001484 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	d302      	bcc.n	8003056 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d1ca      	bne.n	8003028 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030a8:	e042      	b.n	8003130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d119      	bne.n	80030ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0210 	mvn.w	r2, #16
 80030c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e029      	b.n	8003140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ec:	f7fe f9ca 	bl	8001484 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d302      	bcc.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e007      	b.n	8003140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d1b5      	bne.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d11b      	bne.n	8003198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e128      	b.n	800340c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a90      	ldr	r2, [pc, #576]	; (8003414 <HAL_I2S_Init+0x26c>)
 80031d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fd ff6f 	bl	80010b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031f0:	f023 030f 	bic.w	r3, r3, #15
 80031f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2202      	movs	r2, #2
 80031fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d060      	beq.n	80032c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800320e:	2310      	movs	r3, #16
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e001      	b.n	8003218 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003214:	2320      	movs	r3, #32
 8003216:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b20      	cmp	r3, #32
 800321e:	d802      	bhi.n	8003226 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003226:	2001      	movs	r0, #1
 8003228:	f001 fad8 	bl	80047dc <HAL_RCCEx_GetPeriphCLKFreq>
 800322c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003236:	d125      	bne.n	8003284 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d010      	beq.n	8003262 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	fbb2 f2f3 	udiv	r2, r2, r3
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	3305      	adds	r3, #5
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	e01f      	b.n	80032a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	fbb2 f2f3 	udiv	r2, r2, r3
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	461a      	mov	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	3305      	adds	r3, #5
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	e00e      	b.n	80032a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	fbb2 f2f3 	udiv	r2, r2, r3
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	461a      	mov	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	3305      	adds	r3, #5
 80032a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4a5c      	ldr	r2, [pc, #368]	; (8003418 <HAL_I2S_Init+0x270>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	08db      	lsrs	r3, r3, #3
 80032ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e003      	b.n	80032d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032c8:	2302      	movs	r3, #2
 80032ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d902      	bls.n	80032dc <HAL_I2S_Init+0x134>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2bff      	cmp	r3, #255	; 0xff
 80032da:	d907      	bls.n	80032ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f043 0210 	orr.w	r2, r3, #16
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e08f      	b.n	800340c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	ea42 0103 	orr.w	r1, r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800330a:	f023 030f 	bic.w	r3, r3, #15
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6851      	ldr	r1, [r2, #4]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6892      	ldr	r2, [r2, #8]
 8003316:	4311      	orrs	r1, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	68d2      	ldr	r2, [r2, #12]
 800331c:	4311      	orrs	r1, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6992      	ldr	r2, [r2, #24]
 8003322:	430a      	orrs	r2, r1
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d161      	bne.n	80033fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a38      	ldr	r2, [pc, #224]	; (800341c <HAL_I2S_Init+0x274>)
 800333c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a37      	ldr	r2, [pc, #220]	; (8003420 <HAL_I2S_Init+0x278>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d101      	bne.n	800334c <HAL_I2S_Init+0x1a4>
 8003348:	4b36      	ldr	r3, [pc, #216]	; (8003424 <HAL_I2S_Init+0x27c>)
 800334a:	e001      	b.n	8003350 <HAL_I2S_Init+0x1a8>
 800334c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	4932      	ldr	r1, [pc, #200]	; (8003420 <HAL_I2S_Init+0x278>)
 8003358:	428a      	cmp	r2, r1
 800335a:	d101      	bne.n	8003360 <HAL_I2S_Init+0x1b8>
 800335c:	4a31      	ldr	r2, [pc, #196]	; (8003424 <HAL_I2S_Init+0x27c>)
 800335e:	e001      	b.n	8003364 <HAL_I2S_Init+0x1bc>
 8003360:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003364:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003368:	f023 030f 	bic.w	r3, r3, #15
 800336c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <HAL_I2S_Init+0x278>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_I2S_Init+0x1d4>
 8003378:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <HAL_I2S_Init+0x27c>)
 800337a:	e001      	b.n	8003380 <HAL_I2S_Init+0x1d8>
 800337c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003380:	2202      	movs	r2, #2
 8003382:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a25      	ldr	r2, [pc, #148]	; (8003420 <HAL_I2S_Init+0x278>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_I2S_Init+0x1ea>
 800338e:	4b25      	ldr	r3, [pc, #148]	; (8003424 <HAL_I2S_Init+0x27c>)
 8003390:	e001      	b.n	8003396 <HAL_I2S_Init+0x1ee>
 8003392:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a2:	d003      	beq.n	80033ac <HAL_I2S_Init+0x204>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e001      	b.n	80033b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033c2:	4313      	orrs	r3, r2
 80033c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033d6:	4313      	orrs	r3, r2
 80033d8:	b29a      	uxth	r2, r3
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	4313      	orrs	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <HAL_I2S_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_I2S_Init+0x24c>
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_I2S_Init+0x27c>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x250>
 80033f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f8:	897a      	ldrh	r2, [r7, #10]
 80033fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	0800372d 	.word	0x0800372d
 8003418:	cccccccd 	.word	0xcccccccd
 800341c:	08003841 	.word	0x08003841
 8003420:	40003800 	.word	0x40003800
 8003424:	40003400 	.word	0x40003400

08003428 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_I2S_Transmit_DMA+0x1a>
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e08e      	b.n	8003564 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_I2S_Transmit_DMA+0x2e>
 8003452:	2302      	movs	r3, #2
 8003454:	e086      	b.n	8003564 <HAL_I2S_Transmit_DMA+0x13c>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d005      	beq.n	8003476 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003472:	2302      	movs	r3, #2
 8003474:	e076      	b.n	8003564 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2203      	movs	r2, #3
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d002      	beq.n	80034a2 <HAL_I2S_Transmit_DMA+0x7a>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d10a      	bne.n	80034b8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b6:	e005      	b.n	80034c4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	4a28      	ldr	r2, [pc, #160]	; (800356c <HAL_I2S_Transmit_DMA+0x144>)
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <HAL_I2S_Transmit_DMA+0x148>)
 80034d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	4a26      	ldr	r2, [pc, #152]	; (8003574 <HAL_I2S_Transmit_DMA+0x14c>)
 80034da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80034e4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80034ec:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80034f4:	f7fe fa4a 	bl	800198c <HAL_DMA_Start_IT>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00f      	beq.n	800351e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f043 0208 	orr.w	r2, r3, #8
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e022      	b.n	8003564 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800353a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d107      	bne.n	800355a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0202 	orr.w	r2, r2, #2
 8003558:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	0800360b 	.word	0x0800360b
 8003570:	080035c9 	.word	0x080035c9
 8003574:	08003627 	.word	0x08003627

08003578 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10e      	bne.n	80035fc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0202 	bic.w	r2, r2, #2
 80035ec:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff ffc5 	bl	800358c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff ffad 	bl	8003578 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0203 	bic.w	r2, r2, #3
 8003642:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f043 0208 	orr.w	r2, r3, #8
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7ff ffa5 	bl	80035b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	881a      	ldrh	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	1c9a      	adds	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10e      	bne.n	80036c6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff63 	bl	800358c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	b292      	uxth	r2, r2
 80036e2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	1c9a      	adds	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10e      	bne.n	8003724 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003714:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ff3e 	bl	80035a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b04      	cmp	r3, #4
 8003746:	d13a      	bne.n	80037be <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d109      	bne.n	8003766 <I2S_IRQHandler+0x3a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d102      	bne.n	8003766 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ffb4 	bl	80036ce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d126      	bne.n	80037be <I2S_IRQHandler+0x92>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d11f      	bne.n	80037be <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800378c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b0:	f043 0202 	orr.w	r2, r3, #2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fefb 	bl	80035b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d136      	bne.n	8003838 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d109      	bne.n	80037e8 <I2S_IRQHandler+0xbc>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d102      	bne.n	80037e8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ff45 	bl	8003672 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d122      	bne.n	8003838 <I2S_IRQHandler+0x10c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d11b      	bne.n	8003838 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800380e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f043 0204 	orr.w	r2, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff febe 	bl	80035b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4aa2      	ldr	r2, [pc, #648]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d101      	bne.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800385a:	4ba2      	ldr	r3, [pc, #648]	; (8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800385c:	e001      	b.n	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800385e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a9b      	ldr	r2, [pc, #620]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d101      	bne.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003878:	4b9a      	ldr	r3, [pc, #616]	; (8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800387a:	e001      	b.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800387c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d004      	beq.n	8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 8099 	bne.w	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d107      	bne.n	80038b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f925 	bl	8003afc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d107      	bne.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f9c8 	bl	8003c5c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d13a      	bne.n	800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d035      	beq.n	800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a7e      	ldr	r2, [pc, #504]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038ea:	4b7e      	ldr	r3, [pc, #504]	; (8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038ec:	e001      	b.n	80038f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4979      	ldr	r1, [pc, #484]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038fa:	428b      	cmp	r3, r1
 80038fc:	d101      	bne.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038fe:	4b79      	ldr	r3, [pc, #484]	; (8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003900:	e001      	b.n	8003906 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003906:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800390a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800391a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fe34 	bl	80035b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b08      	cmp	r3, #8
 8003954:	f040 80be 	bne.w	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80b8 	beq.w	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003972:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a59      	ldr	r2, [pc, #356]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800397e:	4b59      	ldr	r3, [pc, #356]	; (8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003980:	e001      	b.n	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4954      	ldr	r1, [pc, #336]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800398e:	428b      	cmp	r3, r1
 8003990:	d101      	bne.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003992:	4b54      	ldr	r3, [pc, #336]	; (8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003994:	e001      	b.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800399e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f043 0204 	orr.w	r2, r3, #4
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fdf6 	bl	80035b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039c8:	e084      	b.n	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d107      	bne.n	80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8be 	bl	8003b60 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d107      	bne.n	80039fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f8fd 	bl	8003bf8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d12f      	bne.n	8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d02a      	beq.n	8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a20:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2e      	ldr	r2, [pc, #184]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a2e:	e001      	b.n	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4929      	ldr	r1, [pc, #164]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	d101      	bne.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a40:	4b28      	ldr	r3, [pc, #160]	; (8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a42:	e001      	b.n	8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f043 0202 	orr.w	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff fda6 	bl	80035b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d131      	bne.n	8003ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02c      	beq.n	8003ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a86:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a88:	e001      	b.n	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4912      	ldr	r1, [pc, #72]	; (8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a96:	428b      	cmp	r3, r1
 8003a98:	d101      	bne.n	8003a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a9c:	e001      	b.n	8003aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aa6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ab6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	f043 0204 	orr.w	r2, r3, #4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fd71 	bl	80035b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad2:	e000      	b.n	8003ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ad4:	bf00      	nop
}
 8003ad6:	bf00      	nop
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40003800 	.word	0x40003800
 8003ae4:	40003400 	.word	0x40003400

08003ae8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c99      	adds	r1, r3, #2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6251      	str	r1, [r2, #36]	; 0x24
 8003b0e:	881a      	ldrh	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d113      	bne.n	8003b56 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ffc9 	bl	8003ae8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	1c99      	adds	r1, r3, #2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6251      	str	r1, [r2, #36]	; 0x24
 8003b72:	8819      	ldrh	r1, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <I2SEx_TxISR_I2SExt+0x90>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <I2SEx_TxISR_I2SExt+0x22>
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <I2SEx_TxISR_I2SExt+0x94>)
 8003b80:	e001      	b.n	8003b86 <I2SEx_TxISR_I2SExt+0x26>
 8003b82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b86:	460a      	mov	r2, r1
 8003b88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d121      	bne.n	8003be6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <I2SEx_TxISR_I2SExt+0x90>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <I2SEx_TxISR_I2SExt+0x50>
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <I2SEx_TxISR_I2SExt+0x94>)
 8003bae:	e001      	b.n	8003bb4 <I2SEx_TxISR_I2SExt+0x54>
 8003bb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	490d      	ldr	r1, [pc, #52]	; (8003bf0 <I2SEx_TxISR_I2SExt+0x90>)
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	d101      	bne.n	8003bc4 <I2SEx_TxISR_I2SExt+0x64>
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <I2SEx_TxISR_I2SExt+0x94>)
 8003bc2:	e001      	b.n	8003bc8 <I2SEx_TxISR_I2SExt+0x68>
 8003bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bcc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff81 	bl	8003ae8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40003800 	.word	0x40003800
 8003bf4:	40003400 	.word	0x40003400

08003bf8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68d8      	ldr	r0, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	1c99      	adds	r1, r3, #2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c10:	b282      	uxth	r2, r0
 8003c12:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d113      	bne.n	8003c54 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c3a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff ff4a 	bl	8003ae8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a20      	ldr	r2, [pc, #128]	; (8003cec <I2SEx_RxISR_I2SExt+0x90>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d101      	bne.n	8003c72 <I2SEx_RxISR_I2SExt+0x16>
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <I2SEx_RxISR_I2SExt+0x94>)
 8003c70:	e001      	b.n	8003c76 <I2SEx_RxISR_I2SExt+0x1a>
 8003c72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c76:	68d8      	ldr	r0, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	1c99      	adds	r1, r3, #2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c82:	b282      	uxth	r2, r0
 8003c84:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d121      	bne.n	8003ce2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a12      	ldr	r2, [pc, #72]	; (8003cec <I2SEx_RxISR_I2SExt+0x90>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <I2SEx_RxISR_I2SExt+0x50>
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <I2SEx_RxISR_I2SExt+0x94>)
 8003caa:	e001      	b.n	8003cb0 <I2SEx_RxISR_I2SExt+0x54>
 8003cac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	490d      	ldr	r1, [pc, #52]	; (8003cec <I2SEx_RxISR_I2SExt+0x90>)
 8003cb8:	428b      	cmp	r3, r1
 8003cba:	d101      	bne.n	8003cc0 <I2SEx_RxISR_I2SExt+0x64>
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <I2SEx_RxISR_I2SExt+0x94>)
 8003cbe:	e001      	b.n	8003cc4 <I2SEx_RxISR_I2SExt+0x68>
 8003cc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cc8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff03 	bl	8003ae8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40003800 	.word	0x40003800
 8003cf0:	40003400 	.word	0x40003400

08003cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e264      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d075      	beq.n	8003dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d12:	4ba3      	ldr	r3, [pc, #652]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d00c      	beq.n	8003d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4ba0      	ldr	r3, [pc, #640]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d112      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2a:	4b9d      	ldr	r3, [pc, #628]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d36:	d10b      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	4b99      	ldr	r3, [pc, #612]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d05b      	beq.n	8003dfc <HAL_RCC_OscConfig+0x108>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d157      	bne.n	8003dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e23f      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_OscConfig+0x74>
 8003d5a:	4b91      	ldr	r3, [pc, #580]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a90      	ldr	r2, [pc, #576]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e01d      	b.n	8003da4 <HAL_RCC_OscConfig+0xb0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x98>
 8003d72:	4b8b      	ldr	r3, [pc, #556]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a8a      	ldr	r2, [pc, #552]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b88      	ldr	r3, [pc, #544]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a87      	ldr	r2, [pc, #540]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0xb0>
 8003d8c:	4b84      	ldr	r3, [pc, #528]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a83      	ldr	r2, [pc, #524]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b81      	ldr	r3, [pc, #516]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a80      	ldr	r2, [pc, #512]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d013      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fd fb6a 	bl	8001484 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db4:	f7fd fb66 	bl	8001484 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	; 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e204      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b76      	ldr	r3, [pc, #472]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0xc0>
 8003dd2:	e014      	b.n	8003dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fd fb56 	bl	8001484 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fd fb52 	bl	8001484 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e1f0      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	4b6c      	ldr	r3, [pc, #432]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0xe8>
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d063      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e0a:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d11c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e22:	4b5f      	ldr	r3, [pc, #380]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d116      	bne.n	8003e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	4b5c      	ldr	r3, [pc, #368]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_RCC_OscConfig+0x152>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e1c4      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4952      	ldr	r1, [pc, #328]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5a:	e03a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e64:	4b4f      	ldr	r3, [pc, #316]	; (8003fa4 <HAL_RCC_OscConfig+0x2b0>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fd fb0b 	bl	8001484 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fd fb07 	bl	8001484 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e1a5      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	4b46      	ldr	r3, [pc, #280]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4940      	ldr	r1, [pc, #256]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]
 8003ea4:	e015      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea6:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <HAL_RCC_OscConfig+0x2b0>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fd faea 	bl	8001484 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fd fae6 	bl	8001484 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e184      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d030      	beq.n	8003f40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee6:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <HAL_RCC_OscConfig+0x2b4>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fd faca 	bl	8001484 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef4:	f7fd fac6 	bl	8001484 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e164      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x200>
 8003f12:	e015      	b.n	8003f40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_OscConfig+0x2b4>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1a:	f7fd fab3 	bl	8001484 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f22:	f7fd faaf 	bl	8001484 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e14d      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80a0 	beq.w	800408e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10f      	bne.n	8003f7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_OscConfig+0x2b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d121      	bne.n	8003fce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <HAL_RCC_OscConfig+0x2b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a07      	ldr	r2, [pc, #28]	; (8003fac <HAL_RCC_OscConfig+0x2b8>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f96:	f7fd fa75 	bl	8001484 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	e011      	b.n	8003fc2 <HAL_RCC_OscConfig+0x2ce>
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	42470000 	.word	0x42470000
 8003fa8:	42470e80 	.word	0x42470e80
 8003fac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb0:	f7fd fa68 	bl	8001484 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e106      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc2:	4b85      	ldr	r3, [pc, #532]	; (80041d8 <HAL_RCC_OscConfig+0x4e4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d106      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
 8003fd6:	4b81      	ldr	r3, [pc, #516]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	4a80      	ldr	r2, [pc, #512]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe2:	e01c      	b.n	800401e <HAL_RCC_OscConfig+0x32a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b05      	cmp	r3, #5
 8003fea:	d10c      	bne.n	8004006 <HAL_RCC_OscConfig+0x312>
 8003fec:	4b7b      	ldr	r3, [pc, #492]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4a7a      	ldr	r2, [pc, #488]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff8:	4b78      	ldr	r3, [pc, #480]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a77      	ldr	r2, [pc, #476]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
 8004004:	e00b      	b.n	800401e <HAL_RCC_OscConfig+0x32a>
 8004006:	4b75      	ldr	r3, [pc, #468]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	4a74      	ldr	r2, [pc, #464]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	6713      	str	r3, [r2, #112]	; 0x70
 8004012:	4b72      	ldr	r3, [pc, #456]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	4a71      	ldr	r2, [pc, #452]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8004018:	f023 0304 	bic.w	r3, r3, #4
 800401c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d015      	beq.n	8004052 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fd fa2d 	bl	8001484 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402c:	e00a      	b.n	8004044 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fd fa29 	bl	8001484 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e0c5      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	4b65      	ldr	r3, [pc, #404]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0ee      	beq.n	800402e <HAL_RCC_OscConfig+0x33a>
 8004050:	e014      	b.n	800407c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004052:	f7fd fa17 	bl	8001484 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004058:	e00a      	b.n	8004070 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405a:	f7fd fa13 	bl	8001484 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f241 3288 	movw	r2, #5000	; 0x1388
 8004068:	4293      	cmp	r3, r2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e0af      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004070:	4b5a      	ldr	r3, [pc, #360]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ee      	bne.n	800405a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800407c:	7dfb      	ldrb	r3, [r7, #23]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d105      	bne.n	800408e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004082:	4b56      	ldr	r3, [pc, #344]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a55      	ldr	r2, [pc, #340]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8004088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 809b 	beq.w	80041ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004098:	4b50      	ldr	r3, [pc, #320]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d05c      	beq.n	800415e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d141      	bne.n	8004130 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ac:	4b4c      	ldr	r3, [pc, #304]	; (80041e0 <HAL_RCC_OscConfig+0x4ec>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b2:	f7fd f9e7 	bl	8001484 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fd f9e3 	bl	8001484 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e081      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040cc:	4b43      	ldr	r3, [pc, #268]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	019b      	lsls	r3, r3, #6
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	085b      	lsrs	r3, r3, #1
 80040f0:	3b01      	subs	r3, #1
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	061b      	lsls	r3, r3, #24
 80040fc:	4937      	ldr	r1, [pc, #220]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004102:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <HAL_RCC_OscConfig+0x4ec>)
 8004104:	2201      	movs	r2, #1
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fd f9bc 	bl	8001484 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004110:	f7fd f9b8 	bl	8001484 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e056      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x41c>
 800412e:	e04e      	b.n	80041ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004130:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <HAL_RCC_OscConfig+0x4ec>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7fd f9a5 	bl	8001484 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413e:	f7fd f9a1 	bl	8001484 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e03f      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004150:	4b22      	ldr	r3, [pc, #136]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f0      	bne.n	800413e <HAL_RCC_OscConfig+0x44a>
 800415c:	e037      	b.n	80041ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e032      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800416a:	4b1c      	ldr	r3, [pc, #112]	; (80041dc <HAL_RCC_OscConfig+0x4e8>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d028      	beq.n	80041ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d121      	bne.n	80041ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d11a      	bne.n	80041ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800419a:	4013      	ands	r3, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d111      	bne.n	80041ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	3b01      	subs	r3, #1
 80041b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40007000 	.word	0x40007000
 80041dc:	40023800 	.word	0x40023800
 80041e0:	42470060 	.word	0x42470060

080041e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0cc      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f8:	4b68      	ldr	r3, [pc, #416]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d90c      	bls.n	8004220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b65      	ldr	r3, [pc, #404]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b63      	ldr	r3, [pc, #396]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0b8      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004238:	4b59      	ldr	r3, [pc, #356]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a58      	ldr	r2, [pc, #352]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004250:	4b53      	ldr	r3, [pc, #332]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a52      	ldr	r2, [pc, #328]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800425a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	494d      	ldr	r1, [pc, #308]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d044      	beq.n	8004304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d119      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e07f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d003      	beq.n	80042a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d107      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a2:	4b3f      	ldr	r3, [pc, #252]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e06f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b2:	4b3b      	ldr	r3, [pc, #236]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e067      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c2:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4934      	ldr	r1, [pc, #208]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d4:	f7fd f8d6 	bl	8001484 <HAL_GetTick>
 80042d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042dc:	f7fd f8d2 	bl	8001484 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e04f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	4b2b      	ldr	r3, [pc, #172]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 020c 	and.w	r2, r3, #12
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	429a      	cmp	r2, r3
 8004302:	d1eb      	bne.n	80042dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004304:	4b25      	ldr	r3, [pc, #148]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d20c      	bcs.n	800432c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b22      	ldr	r3, [pc, #136]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e032      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4916      	ldr	r1, [pc, #88]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004356:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	490e      	ldr	r1, [pc, #56]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	4313      	orrs	r3, r2
 8004368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800436a:	f000 f821 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800436e:	4602      	mov	r2, r0
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	490a      	ldr	r1, [pc, #40]	; (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 800437c:	5ccb      	ldrb	r3, [r1, r3]
 800437e:	fa22 f303 	lsr.w	r3, r2, r3
 8004382:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fc ff78 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023c00 	.word	0x40023c00
 80043a0:	40023800 	.word	0x40023800
 80043a4:	08005dd0 	.word	0x08005dd0
 80043a8:	20000000 	.word	0x20000000
 80043ac:	20000004 	.word	0x20000004

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	2300      	movs	r3, #0
 80043c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c8:	4b67      	ldr	r3, [pc, #412]	; (8004568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d00d      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x40>
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	f200 80bd 	bhi.w	8004554 <HAL_RCC_GetSysClockFreq+0x1a4>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x34>
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d003      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0x3a>
 80043e2:	e0b7      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b61      	ldr	r3, [pc, #388]	; (800456c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043e6:	60bb      	str	r3, [r7, #8]
       break;
 80043e8:	e0b7      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ea:	4b61      	ldr	r3, [pc, #388]	; (8004570 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80043ec:	60bb      	str	r3, [r7, #8]
      break;
 80043ee:	e0b4      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f0:	4b5d      	ldr	r3, [pc, #372]	; (8004568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043fa:	4b5b      	ldr	r3, [pc, #364]	; (8004568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d04d      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004406:	4b58      	ldr	r3, [pc, #352]	; (8004568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	099b      	lsrs	r3, r3, #6
 800440c:	461a      	mov	r2, r3
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	ea02 0800 	and.w	r8, r2, r0
 800441e:	ea03 0901 	and.w	r9, r3, r1
 8004422:	4640      	mov	r0, r8
 8004424:	4649      	mov	r1, r9
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	014b      	lsls	r3, r1, #5
 8004430:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004434:	0142      	lsls	r2, r0, #5
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	ebb0 0008 	subs.w	r0, r0, r8
 800443e:	eb61 0109 	sbc.w	r1, r1, r9
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	018b      	lsls	r3, r1, #6
 800444c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004450:	0182      	lsls	r2, r0, #6
 8004452:	1a12      	subs	r2, r2, r0
 8004454:	eb63 0301 	sbc.w	r3, r3, r1
 8004458:	f04f 0000 	mov.w	r0, #0
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	00d9      	lsls	r1, r3, #3
 8004462:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004466:	00d0      	lsls	r0, r2, #3
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	eb12 0208 	adds.w	r2, r2, r8
 8004470:	eb43 0309 	adc.w	r3, r3, r9
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f04f 0100 	mov.w	r1, #0
 800447c:	0259      	lsls	r1, r3, #9
 800447e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004482:	0250      	lsls	r0, r2, #9
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	461a      	mov	r2, r3
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	f7fb fe98 	bl	80001c8 <__aeabi_uldivmod>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4613      	mov	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e04a      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a2:	4b31      	ldr	r3, [pc, #196]	; (8004568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	461a      	mov	r2, r3
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044b2:	f04f 0100 	mov.w	r1, #0
 80044b6:	ea02 0400 	and.w	r4, r2, r0
 80044ba:	ea03 0501 	and.w	r5, r3, r1
 80044be:	4620      	mov	r0, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	014b      	lsls	r3, r1, #5
 80044cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044d0:	0142      	lsls	r2, r0, #5
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	1b00      	subs	r0, r0, r4
 80044d8:	eb61 0105 	sbc.w	r1, r1, r5
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	018b      	lsls	r3, r1, #6
 80044e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044ea:	0182      	lsls	r2, r0, #6
 80044ec:	1a12      	subs	r2, r2, r0
 80044ee:	eb63 0301 	sbc.w	r3, r3, r1
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	00d9      	lsls	r1, r3, #3
 80044fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004500:	00d0      	lsls	r0, r2, #3
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	1912      	adds	r2, r2, r4
 8004508:	eb45 0303 	adc.w	r3, r5, r3
 800450c:	f04f 0000 	mov.w	r0, #0
 8004510:	f04f 0100 	mov.w	r1, #0
 8004514:	0299      	lsls	r1, r3, #10
 8004516:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800451a:	0290      	lsls	r0, r2, #10
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	461a      	mov	r2, r3
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	f7fb fe4c 	bl	80001c8 <__aeabi_uldivmod>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4613      	mov	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	3301      	adds	r3, #1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	60bb      	str	r3, [r7, #8]
      break;
 8004552:	e002      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004556:	60bb      	str	r3, [r7, #8]
      break;
 8004558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800455a:	68bb      	ldr	r3, [r7, #8]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800
 800456c:	00f42400 	.word	0x00f42400
 8004570:	007a1200 	.word	0x007a1200

08004574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <HAL_RCC_GetHCLKFreq+0x14>)
 800457a:	681b      	ldr	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000000 	.word	0x20000000

0800458c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004590:	f7ff fff0 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 8004594:	4602      	mov	r2, r0
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	0a9b      	lsrs	r3, r3, #10
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	4903      	ldr	r1, [pc, #12]	; (80045b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40023800 	.word	0x40023800
 80045b0:	08005de0 	.word	0x08005de0

080045b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	220f      	movs	r2, #15
 80045c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_RCC_GetClockConfig+0x5c>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0203 	and.w	r2, r3, #3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <HAL_RCC_GetClockConfig+0x5c>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <HAL_RCC_GetClockConfig+0x5c>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_RCC_GetClockConfig+0x5c>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	08db      	lsrs	r3, r3, #3
 80045ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045f6:	4b07      	ldr	r3, [pc, #28]	; (8004614 <HAL_RCC_GetClockConfig+0x60>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0207 	and.w	r2, r3, #7
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	601a      	str	r2, [r3, #0]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	40023c00 	.word	0x40023c00

08004618 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800463c:	2b00      	cmp	r3, #0
 800463e:	d035      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004640:	4b62      	ldr	r3, [pc, #392]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004646:	f7fc ff1d 	bl	8001484 <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800464e:	f7fc ff19 	bl	8001484 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0b0      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004660:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	019a      	lsls	r2, r3, #6
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	071b      	lsls	r3, r3, #28
 8004678:	4955      	ldr	r1, [pc, #340]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004680:	4b52      	ldr	r3, [pc, #328]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004686:	f7fc fefd 	bl	8001484 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800468e:	f7fc fef9 	bl	8001484 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e090      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8083 	beq.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b44      	ldr	r3, [pc, #272]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	4a43      	ldr	r2, [pc, #268]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046d6:	4b3f      	ldr	r3, [pc, #252]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3e      	ldr	r2, [pc, #248]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046e2:	f7fc fecf 	bl	8001484 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fc fecb 	bl	8001484 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e062      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046fc:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004708:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004710:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02f      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	429a      	cmp	r2, r3
 8004724:	d028      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004730:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004736:	4b28      	ldr	r3, [pc, #160]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800473c:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004742:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d114      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800474e:	f7fc fe99 	bl	8001484 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fc fe95 	bl	8001484 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e02a      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ee      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004784:	d10d      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479a:	490d      	ldr	r1, [pc, #52]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]
 80047a0:	e005      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ac:	6093      	str	r3, [r2, #8]
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ba:	4905      	ldr	r1, [pc, #20]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	42470068 	.word	0x42470068
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42470e40 	.word	0x42470e40

080047dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d13e      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d12f      	bne.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004810:	4b1e      	ldr	r3, [pc, #120]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004812:	617b      	str	r3, [r7, #20]
          break;
 8004814:	e02f      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004816:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004822:	d108      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800482c:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	e007      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	fb02 f303 	mul.w	r3, r2, r3
 8004858:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800485c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004860:	0f1b      	lsrs	r3, r3, #28
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
          break;
 800486e:	e002      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
          break;
 8004874:	bf00      	nop
        }
      }
      break;
 8004876:	bf00      	nop
    }
  }
  return frequency;
 8004878:	697b      	ldr	r3, [r7, #20]
}
 800487a:	4618      	mov	r0, r3
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800
 800488c:	00bb8000 	.word	0x00bb8000
 8004890:	007a1200 	.word	0x007a1200
 8004894:	00f42400 	.word	0x00f42400

08004898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e041      	b.n	800492e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fc fcb8 	bl	8001234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f000 fafe 	bl	8004ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d001      	beq.n	8004950 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e046      	b.n	80049de <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a23      	ldr	r2, [pc, #140]	; (80049ec <HAL_TIM_Base_Start+0xb4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d022      	beq.n	80049a8 <HAL_TIM_Base_Start+0x70>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496a:	d01d      	beq.n	80049a8 <HAL_TIM_Base_Start+0x70>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <HAL_TIM_Base_Start+0xb8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d018      	beq.n	80049a8 <HAL_TIM_Base_Start+0x70>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1e      	ldr	r2, [pc, #120]	; (80049f4 <HAL_TIM_Base_Start+0xbc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d013      	beq.n	80049a8 <HAL_TIM_Base_Start+0x70>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <HAL_TIM_Base_Start+0xc0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00e      	beq.n	80049a8 <HAL_TIM_Base_Start+0x70>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <HAL_TIM_Base_Start+0xc4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_TIM_Base_Start+0x70>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <HAL_TIM_Base_Start+0xc8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_TIM_Base_Start+0x70>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <HAL_TIM_Base_Start+0xcc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d111      	bne.n	80049cc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b06      	cmp	r3, #6
 80049b8:	d010      	beq.n	80049dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ca:	e007      	b.n	80049dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40000800 	.word	0x40000800
 80049f8:	40000c00 	.word	0x40000c00
 80049fc:	40010400 	.word	0x40010400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40001800 	.word	0x40001800

08004a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d001      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e04e      	b.n	8004abe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <HAL_TIM_Base_Start_IT+0xc4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d022      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d01d      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d018      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d013      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00e      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a18      	ldr	r2, [pc, #96]	; (8004ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d111      	bne.n	8004aac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d010      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	e007      	b.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40010400 	.word	0x40010400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40001800 	.word	0x40001800

08004ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d122      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d11b      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0202 	mvn.w	r2, #2
 8004b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f9b5 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f9a7 	bl	8004e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f9b8 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d122      	bne.n	8004b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d11b      	bne.n	8004b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0204 	mvn.w	r2, #4
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f98b 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f97d 	bl	8004e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f98e 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d122      	bne.n	8004bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d11b      	bne.n	8004bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0208 	mvn.w	r2, #8
 8004bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f961 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004bd8:	e005      	b.n	8004be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f953 	bl	8004e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f964 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b10      	cmp	r3, #16
 8004bf8:	d122      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d11b      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0210 	mvn.w	r2, #16
 8004c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2208      	movs	r2, #8
 8004c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f937 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f929 	bl	8004e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f93a 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10e      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d107      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0201 	mvn.w	r2, #1
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc f8ae 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b80      	cmp	r3, #128	; 0x80
 8004c78:	d10e      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	2b80      	cmp	r3, #128	; 0x80
 8004c86:	d107      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fae0 	bl	8005258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f8ff 	bl	8004ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d107      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0220 	mvn.w	r2, #32
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 faaa 	bl	8005244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIM_ConfigClockSource+0x1c>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0b4      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x186>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4c:	d03e      	beq.n	8004dcc <HAL_TIM_ConfigClockSource+0xd4>
 8004d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d52:	f200 8087 	bhi.w	8004e64 <HAL_TIM_ConfigClockSource+0x16c>
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	f000 8086 	beq.w	8004e6a <HAL_TIM_ConfigClockSource+0x172>
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d62:	d87f      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x16c>
 8004d64:	2b70      	cmp	r3, #112	; 0x70
 8004d66:	d01a      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0xa6>
 8004d68:	2b70      	cmp	r3, #112	; 0x70
 8004d6a:	d87b      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x16c>
 8004d6c:	2b60      	cmp	r3, #96	; 0x60
 8004d6e:	d050      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x11a>
 8004d70:	2b60      	cmp	r3, #96	; 0x60
 8004d72:	d877      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b50      	cmp	r3, #80	; 0x50
 8004d76:	d03c      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d78:	2b50      	cmp	r3, #80	; 0x50
 8004d7a:	d873      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d058      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0x13a>
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d86f      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b30      	cmp	r3, #48	; 0x30
 8004d86:	d064      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x15a>
 8004d88:	2b30      	cmp	r3, #48	; 0x30
 8004d8a:	d86b      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x16c>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d060      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x15a>
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d867      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x16c>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d05c      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x15a>
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d05a      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x15a>
 8004d9c:	e062      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6899      	ldr	r1, [r3, #8]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f000 f9ad 	bl	800510c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	609a      	str	r2, [r3, #8]
      break;
 8004dca:	e04f      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	6899      	ldr	r1, [r3, #8]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f000 f996 	bl	800510c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dee:	609a      	str	r2, [r3, #8]
      break;
 8004df0:	e03c      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6859      	ldr	r1, [r3, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f000 f90a 	bl	8005018 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2150      	movs	r1, #80	; 0x50
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 f963 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 8004e10:	e02c      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6859      	ldr	r1, [r3, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f000 f929 	bl	8005076 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2160      	movs	r1, #96	; 0x60
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f953 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 8004e30:	e01c      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6859      	ldr	r1, [r3, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f000 f8ea 	bl	8005018 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2140      	movs	r1, #64	; 0x40
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f943 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 8004e50:	e00c      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f000 f93a 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 8004e62:	e003      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      break;
 8004e68:	e000      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a40      	ldr	r2, [pc, #256]	; (8004fec <TIM_Base_SetConfig+0x114>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d013      	beq.n	8004f18 <TIM_Base_SetConfig+0x40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef6:	d00f      	beq.n	8004f18 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a3d      	ldr	r2, [pc, #244]	; (8004ff0 <TIM_Base_SetConfig+0x118>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00b      	beq.n	8004f18 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a3c      	ldr	r2, [pc, #240]	; (8004ff4 <TIM_Base_SetConfig+0x11c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d007      	beq.n	8004f18 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3b      	ldr	r2, [pc, #236]	; (8004ff8 <TIM_Base_SetConfig+0x120>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3a      	ldr	r2, [pc, #232]	; (8004ffc <TIM_Base_SetConfig+0x124>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d108      	bne.n	8004f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <TIM_Base_SetConfig+0x114>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02b      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f38:	d027      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ff0 <TIM_Base_SetConfig+0x118>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d023      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2b      	ldr	r2, [pc, #172]	; (8004ff4 <TIM_Base_SetConfig+0x11c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d01f      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ff8 <TIM_Base_SetConfig+0x120>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01b      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a29      	ldr	r2, [pc, #164]	; (8004ffc <TIM_Base_SetConfig+0x124>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d017      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a28      	ldr	r2, [pc, #160]	; (8005000 <TIM_Base_SetConfig+0x128>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a27      	ldr	r2, [pc, #156]	; (8005004 <TIM_Base_SetConfig+0x12c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00f      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a26      	ldr	r2, [pc, #152]	; (8005008 <TIM_Base_SetConfig+0x130>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00b      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a25      	ldr	r2, [pc, #148]	; (800500c <TIM_Base_SetConfig+0x134>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d007      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a24      	ldr	r2, [pc, #144]	; (8005010 <TIM_Base_SetConfig+0x138>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a23      	ldr	r2, [pc, #140]	; (8005014 <TIM_Base_SetConfig+0x13c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d108      	bne.n	8004f9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a0a      	ldr	r2, [pc, #40]	; (8004fec <TIM_Base_SetConfig+0x114>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_Base_SetConfig+0xf8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <TIM_Base_SetConfig+0x124>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d103      	bne.n	8004fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	615a      	str	r2, [r3, #20]
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40010400 	.word	0x40010400
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800
 800500c:	40001800 	.word	0x40001800
 8005010:	40001c00 	.word	0x40001c00
 8005014:	40002000 	.word	0x40002000

08005018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f023 030a 	bic.w	r3, r3, #10
 8005054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005076:	b480      	push	{r7}
 8005078:	b087      	sub	sp, #28
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0210 	bic.w	r2, r3, #16
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	031b      	lsls	r3, r3, #12
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f043 0307 	orr.w	r3, r3, #7
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	609a      	str	r2, [r3, #8]
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	021a      	lsls	r2, r3, #8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	431a      	orrs	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4313      	orrs	r3, r2
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005160:	2302      	movs	r3, #2
 8005162:	e05a      	b.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a21      	ldr	r2, [pc, #132]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d022      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b0:	d01d      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1d      	ldr	r2, [pc, #116]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d018      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d013      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1a      	ldr	r2, [pc, #104]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a18      	ldr	r2, [pc, #96]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d009      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a17      	ldr	r2, [pc, #92]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a15      	ldr	r2, [pc, #84]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d10c      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40010400 	.word	0x40010400
 800523c:	40014000 	.word	0x40014000
 8005240:	40001800 	.word	0x40001800

08005244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4d0d      	ldr	r5, [pc, #52]	; (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	; (80052a8 <__libc_init_array+0x3c>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2600      	movs	r6, #0
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4d0b      	ldr	r5, [pc, #44]	; (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	; (80052b0 <__libc_init_array+0x44>)
 8005280:	f000 fd9a 	bl	8005db8 <_init>
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2600      	movs	r6, #0
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	080061c8 	.word	0x080061c8
 80052a8:	080061c8 	.word	0x080061c8
 80052ac:	080061c8 	.word	0x080061c8
 80052b0:	080061cc 	.word	0x080061cc

080052b4 <memcpy>:
 80052b4:	440a      	add	r2, r1
 80052b6:	4291      	cmp	r1, r2
 80052b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80052bc:	d100      	bne.n	80052c0 <memcpy+0xc>
 80052be:	4770      	bx	lr
 80052c0:	b510      	push	{r4, lr}
 80052c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ca:	4291      	cmp	r1, r2
 80052cc:	d1f9      	bne.n	80052c2 <memcpy+0xe>
 80052ce:	bd10      	pop	{r4, pc}

080052d0 <memset>:
 80052d0:	4402      	add	r2, r0
 80052d2:	4603      	mov	r3, r0
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d100      	bne.n	80052da <memset+0xa>
 80052d8:	4770      	bx	lr
 80052da:	f803 1b01 	strb.w	r1, [r3], #1
 80052de:	e7f9      	b.n	80052d4 <memset+0x4>

080052e0 <sinf>:
 80052e0:	ee10 3a10 	vmov	r3, s0
 80052e4:	b507      	push	{r0, r1, r2, lr}
 80052e6:	4a1d      	ldr	r2, [pc, #116]	; (800535c <sinf+0x7c>)
 80052e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ec:	4293      	cmp	r3, r2
 80052ee:	dc05      	bgt.n	80052fc <sinf+0x1c>
 80052f0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005360 <sinf+0x80>
 80052f4:	2000      	movs	r0, #0
 80052f6:	f000 fc5b 	bl	8005bb0 <__kernel_sinf>
 80052fa:	e004      	b.n	8005306 <sinf+0x26>
 80052fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005300:	db04      	blt.n	800530c <sinf+0x2c>
 8005302:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005306:	b003      	add	sp, #12
 8005308:	f85d fb04 	ldr.w	pc, [sp], #4
 800530c:	4668      	mov	r0, sp
 800530e:	f000 f829 	bl	8005364 <__ieee754_rem_pio2f>
 8005312:	f000 0003 	and.w	r0, r0, #3
 8005316:	2801      	cmp	r0, #1
 8005318:	d008      	beq.n	800532c <sinf+0x4c>
 800531a:	2802      	cmp	r0, #2
 800531c:	d00d      	beq.n	800533a <sinf+0x5a>
 800531e:	b9b0      	cbnz	r0, 800534e <sinf+0x6e>
 8005320:	eddd 0a01 	vldr	s1, [sp, #4]
 8005324:	ed9d 0a00 	vldr	s0, [sp]
 8005328:	2001      	movs	r0, #1
 800532a:	e7e4      	b.n	80052f6 <sinf+0x16>
 800532c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005330:	ed9d 0a00 	vldr	s0, [sp]
 8005334:	f000 f952 	bl	80055dc <__kernel_cosf>
 8005338:	e7e5      	b.n	8005306 <sinf+0x26>
 800533a:	eddd 0a01 	vldr	s1, [sp, #4]
 800533e:	ed9d 0a00 	vldr	s0, [sp]
 8005342:	2001      	movs	r0, #1
 8005344:	f000 fc34 	bl	8005bb0 <__kernel_sinf>
 8005348:	eeb1 0a40 	vneg.f32	s0, s0
 800534c:	e7db      	b.n	8005306 <sinf+0x26>
 800534e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005352:	ed9d 0a00 	vldr	s0, [sp]
 8005356:	f000 f941 	bl	80055dc <__kernel_cosf>
 800535a:	e7f5      	b.n	8005348 <sinf+0x68>
 800535c:	3f490fd8 	.word	0x3f490fd8
 8005360:	00000000 	.word	0x00000000

08005364 <__ieee754_rem_pio2f>:
 8005364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005366:	ee10 6a10 	vmov	r6, s0
 800536a:	4b8e      	ldr	r3, [pc, #568]	; (80055a4 <__ieee754_rem_pio2f+0x240>)
 800536c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005370:	429d      	cmp	r5, r3
 8005372:	b087      	sub	sp, #28
 8005374:	eef0 7a40 	vmov.f32	s15, s0
 8005378:	4604      	mov	r4, r0
 800537a:	dc05      	bgt.n	8005388 <__ieee754_rem_pio2f+0x24>
 800537c:	2300      	movs	r3, #0
 800537e:	ed80 0a00 	vstr	s0, [r0]
 8005382:	6043      	str	r3, [r0, #4]
 8005384:	2000      	movs	r0, #0
 8005386:	e01a      	b.n	80053be <__ieee754_rem_pio2f+0x5a>
 8005388:	4b87      	ldr	r3, [pc, #540]	; (80055a8 <__ieee754_rem_pio2f+0x244>)
 800538a:	429d      	cmp	r5, r3
 800538c:	dc46      	bgt.n	800541c <__ieee754_rem_pio2f+0xb8>
 800538e:	2e00      	cmp	r6, #0
 8005390:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80055ac <__ieee754_rem_pio2f+0x248>
 8005394:	4b86      	ldr	r3, [pc, #536]	; (80055b0 <__ieee754_rem_pio2f+0x24c>)
 8005396:	f025 050f 	bic.w	r5, r5, #15
 800539a:	dd1f      	ble.n	80053dc <__ieee754_rem_pio2f+0x78>
 800539c:	429d      	cmp	r5, r3
 800539e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053a2:	d00e      	beq.n	80053c2 <__ieee754_rem_pio2f+0x5e>
 80053a4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80055b4 <__ieee754_rem_pio2f+0x250>
 80053a8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80053ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053b0:	ed80 0a00 	vstr	s0, [r0]
 80053b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053b8:	2001      	movs	r0, #1
 80053ba:	edc4 7a01 	vstr	s15, [r4, #4]
 80053be:	b007      	add	sp, #28
 80053c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80055b8 <__ieee754_rem_pio2f+0x254>
 80053c6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80055bc <__ieee754_rem_pio2f+0x258>
 80053ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053ce:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80053d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80053d6:	edc0 6a00 	vstr	s13, [r0]
 80053da:	e7eb      	b.n	80053b4 <__ieee754_rem_pio2f+0x50>
 80053dc:	429d      	cmp	r5, r3
 80053de:	ee77 7a80 	vadd.f32	s15, s15, s0
 80053e2:	d00e      	beq.n	8005402 <__ieee754_rem_pio2f+0x9e>
 80053e4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80055b4 <__ieee754_rem_pio2f+0x250>
 80053e8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80053ec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053f0:	ed80 0a00 	vstr	s0, [r0]
 80053f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	edc4 7a01 	vstr	s15, [r4, #4]
 8005400:	e7dd      	b.n	80053be <__ieee754_rem_pio2f+0x5a>
 8005402:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80055b8 <__ieee754_rem_pio2f+0x254>
 8005406:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80055bc <__ieee754_rem_pio2f+0x258>
 800540a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800540e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005412:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005416:	edc0 6a00 	vstr	s13, [r0]
 800541a:	e7eb      	b.n	80053f4 <__ieee754_rem_pio2f+0x90>
 800541c:	4b68      	ldr	r3, [pc, #416]	; (80055c0 <__ieee754_rem_pio2f+0x25c>)
 800541e:	429d      	cmp	r5, r3
 8005420:	dc72      	bgt.n	8005508 <__ieee754_rem_pio2f+0x1a4>
 8005422:	f000 fc0d 	bl	8005c40 <fabsf>
 8005426:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80055c4 <__ieee754_rem_pio2f+0x260>
 800542a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800542e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800543a:	ee17 0a90 	vmov	r0, s15
 800543e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80055ac <__ieee754_rem_pio2f+0x248>
 8005442:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005446:	281f      	cmp	r0, #31
 8005448:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80055b4 <__ieee754_rem_pio2f+0x250>
 800544c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005450:	eeb1 6a47 	vneg.f32	s12, s14
 8005454:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005458:	ee16 2a90 	vmov	r2, s13
 800545c:	dc1c      	bgt.n	8005498 <__ieee754_rem_pio2f+0x134>
 800545e:	495a      	ldr	r1, [pc, #360]	; (80055c8 <__ieee754_rem_pio2f+0x264>)
 8005460:	1e47      	subs	r7, r0, #1
 8005462:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8005466:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800546a:	428b      	cmp	r3, r1
 800546c:	d014      	beq.n	8005498 <__ieee754_rem_pio2f+0x134>
 800546e:	6022      	str	r2, [r4, #0]
 8005470:	ed94 7a00 	vldr	s14, [r4]
 8005474:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005478:	2e00      	cmp	r6, #0
 800547a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800547e:	ed84 0a01 	vstr	s0, [r4, #4]
 8005482:	da9c      	bge.n	80053be <__ieee754_rem_pio2f+0x5a>
 8005484:	eeb1 7a47 	vneg.f32	s14, s14
 8005488:	eeb1 0a40 	vneg.f32	s0, s0
 800548c:	ed84 7a00 	vstr	s14, [r4]
 8005490:	ed84 0a01 	vstr	s0, [r4, #4]
 8005494:	4240      	negs	r0, r0
 8005496:	e792      	b.n	80053be <__ieee754_rem_pio2f+0x5a>
 8005498:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800549c:	15eb      	asrs	r3, r5, #23
 800549e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80054a2:	2d08      	cmp	r5, #8
 80054a4:	dde3      	ble.n	800546e <__ieee754_rem_pio2f+0x10a>
 80054a6:	eddf 7a44 	vldr	s15, [pc, #272]	; 80055b8 <__ieee754_rem_pio2f+0x254>
 80054aa:	eef0 6a40 	vmov.f32	s13, s0
 80054ae:	eee6 6a27 	vfma.f32	s13, s12, s15
 80054b2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80054b6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80054ba:	eddf 7a40 	vldr	s15, [pc, #256]	; 80055bc <__ieee754_rem_pio2f+0x258>
 80054be:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80054c2:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80054c6:	eef0 7a40 	vmov.f32	s15, s0
 80054ca:	ee15 2a90 	vmov	r2, s11
 80054ce:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80054d2:	1a5b      	subs	r3, r3, r1
 80054d4:	2b19      	cmp	r3, #25
 80054d6:	dc04      	bgt.n	80054e2 <__ieee754_rem_pio2f+0x17e>
 80054d8:	edc4 5a00 	vstr	s11, [r4]
 80054dc:	eeb0 0a66 	vmov.f32	s0, s13
 80054e0:	e7c6      	b.n	8005470 <__ieee754_rem_pio2f+0x10c>
 80054e2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80055cc <__ieee754_rem_pio2f+0x268>
 80054e6:	eeb0 0a66 	vmov.f32	s0, s13
 80054ea:	eea6 0a25 	vfma.f32	s0, s12, s11
 80054ee:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80054f2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80055d0 <__ieee754_rem_pio2f+0x26c>
 80054f6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80054fa:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80054fe:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005502:	ed84 7a00 	vstr	s14, [r4]
 8005506:	e7b3      	b.n	8005470 <__ieee754_rem_pio2f+0x10c>
 8005508:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800550c:	db06      	blt.n	800551c <__ieee754_rem_pio2f+0x1b8>
 800550e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005512:	edc0 7a01 	vstr	s15, [r0, #4]
 8005516:	edc0 7a00 	vstr	s15, [r0]
 800551a:	e733      	b.n	8005384 <__ieee754_rem_pio2f+0x20>
 800551c:	15ea      	asrs	r2, r5, #23
 800551e:	3a86      	subs	r2, #134	; 0x86
 8005520:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800552c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80055d4 <__ieee754_rem_pio2f+0x270>
 8005530:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005538:	ed8d 7a03 	vstr	s14, [sp, #12]
 800553c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005540:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800554c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005554:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555c:	edcd 7a05 	vstr	s15, [sp, #20]
 8005560:	d11e      	bne.n	80055a0 <__ieee754_rem_pio2f+0x23c>
 8005562:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800556a:	bf14      	ite	ne
 800556c:	2302      	movne	r3, #2
 800556e:	2301      	moveq	r3, #1
 8005570:	4919      	ldr	r1, [pc, #100]	; (80055d8 <__ieee754_rem_pio2f+0x274>)
 8005572:	9101      	str	r1, [sp, #4]
 8005574:	2102      	movs	r1, #2
 8005576:	9100      	str	r1, [sp, #0]
 8005578:	a803      	add	r0, sp, #12
 800557a:	4621      	mov	r1, r4
 800557c:	f000 f88e 	bl	800569c <__kernel_rem_pio2f>
 8005580:	2e00      	cmp	r6, #0
 8005582:	f6bf af1c 	bge.w	80053be <__ieee754_rem_pio2f+0x5a>
 8005586:	edd4 7a00 	vldr	s15, [r4]
 800558a:	eef1 7a67 	vneg.f32	s15, s15
 800558e:	edc4 7a00 	vstr	s15, [r4]
 8005592:	edd4 7a01 	vldr	s15, [r4, #4]
 8005596:	eef1 7a67 	vneg.f32	s15, s15
 800559a:	edc4 7a01 	vstr	s15, [r4, #4]
 800559e:	e779      	b.n	8005494 <__ieee754_rem_pio2f+0x130>
 80055a0:	2303      	movs	r3, #3
 80055a2:	e7e5      	b.n	8005570 <__ieee754_rem_pio2f+0x20c>
 80055a4:	3f490fd8 	.word	0x3f490fd8
 80055a8:	4016cbe3 	.word	0x4016cbe3
 80055ac:	3fc90f80 	.word	0x3fc90f80
 80055b0:	3fc90fd0 	.word	0x3fc90fd0
 80055b4:	37354443 	.word	0x37354443
 80055b8:	37354400 	.word	0x37354400
 80055bc:	2e85a308 	.word	0x2e85a308
 80055c0:	43490f80 	.word	0x43490f80
 80055c4:	3f22f984 	.word	0x3f22f984
 80055c8:	08005df0 	.word	0x08005df0
 80055cc:	2e85a300 	.word	0x2e85a300
 80055d0:	248d3132 	.word	0x248d3132
 80055d4:	43800000 	.word	0x43800000
 80055d8:	08005e70 	.word	0x08005e70

080055dc <__kernel_cosf>:
 80055dc:	ee10 3a10 	vmov	r3, s0
 80055e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80055e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80055ec:	da05      	bge.n	80055fa <__kernel_cosf+0x1e>
 80055ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80055f2:	ee17 2a90 	vmov	r2, s15
 80055f6:	2a00      	cmp	r2, #0
 80055f8:	d03d      	beq.n	8005676 <__kernel_cosf+0x9a>
 80055fa:	ee60 5a00 	vmul.f32	s11, s0, s0
 80055fe:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800567c <__kernel_cosf+0xa0>
 8005602:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005680 <__kernel_cosf+0xa4>
 8005606:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005684 <__kernel_cosf+0xa8>
 800560a:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <__kernel_cosf+0xac>)
 800560c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005610:	4293      	cmp	r3, r2
 8005612:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800568c <__kernel_cosf+0xb0>
 8005616:	eee7 7a25 	vfma.f32	s15, s14, s11
 800561a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005690 <__kernel_cosf+0xb4>
 800561e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005622:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8005694 <__kernel_cosf+0xb8>
 8005626:	eee7 7a25 	vfma.f32	s15, s14, s11
 800562a:	eeb0 7a66 	vmov.f32	s14, s13
 800562e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005632:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005636:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800563a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800563e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8005642:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005646:	dc04      	bgt.n	8005652 <__kernel_cosf+0x76>
 8005648:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800564c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8005650:	4770      	bx	lr
 8005652:	4a11      	ldr	r2, [pc, #68]	; (8005698 <__kernel_cosf+0xbc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	bfda      	itte	le
 8005658:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800565c:	ee06 3a90 	vmovle	s13, r3
 8005660:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8005664:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005668:	ee36 0a66 	vsub.f32	s0, s12, s13
 800566c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005670:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005674:	4770      	bx	lr
 8005676:	eeb0 0a46 	vmov.f32	s0, s12
 800567a:	4770      	bx	lr
 800567c:	ad47d74e 	.word	0xad47d74e
 8005680:	310f74f6 	.word	0x310f74f6
 8005684:	3d2aaaab 	.word	0x3d2aaaab
 8005688:	3e999999 	.word	0x3e999999
 800568c:	b493f27c 	.word	0xb493f27c
 8005690:	37d00d01 	.word	0x37d00d01
 8005694:	bab60b61 	.word	0xbab60b61
 8005698:	3f480000 	.word	0x3f480000

0800569c <__kernel_rem_pio2f>:
 800569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	ed2d 8b04 	vpush	{d8-d9}
 80056a4:	b0d7      	sub	sp, #348	; 0x15c
 80056a6:	4616      	mov	r6, r2
 80056a8:	4698      	mov	r8, r3
 80056aa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80056ac:	4bbb      	ldr	r3, [pc, #748]	; (800599c <__kernel_rem_pio2f+0x300>)
 80056ae:	9001      	str	r0, [sp, #4]
 80056b0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80056b4:	1d33      	adds	r3, r6, #4
 80056b6:	460d      	mov	r5, r1
 80056b8:	f108 39ff 	add.w	r9, r8, #4294967295
 80056bc:	db29      	blt.n	8005712 <__kernel_rem_pio2f+0x76>
 80056be:	1ef1      	subs	r1, r6, #3
 80056c0:	bf48      	it	mi
 80056c2:	1d31      	addmi	r1, r6, #4
 80056c4:	10c9      	asrs	r1, r1, #3
 80056c6:	1c4c      	adds	r4, r1, #1
 80056c8:	00e3      	lsls	r3, r4, #3
 80056ca:	9302      	str	r3, [sp, #8]
 80056cc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80056ce:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80059ac <__kernel_rem_pio2f+0x310>
 80056d2:	eba1 0009 	sub.w	r0, r1, r9
 80056d6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80056da:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80056de:	eb07 0c09 	add.w	ip, r7, r9
 80056e2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80056e6:	2300      	movs	r3, #0
 80056e8:	4563      	cmp	r3, ip
 80056ea:	dd14      	ble.n	8005716 <__kernel_rem_pio2f+0x7a>
 80056ec:	ab1a      	add	r3, sp, #104	; 0x68
 80056ee:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80056f2:	46cc      	mov	ip, r9
 80056f4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80056f8:	f1c8 0b01 	rsb	fp, r8, #1
 80056fc:	eb0b 020c 	add.w	r2, fp, ip
 8005700:	4297      	cmp	r7, r2
 8005702:	db27      	blt.n	8005754 <__kernel_rem_pio2f+0xb8>
 8005704:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005708:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80059ac <__kernel_rem_pio2f+0x310>
 800570c:	4618      	mov	r0, r3
 800570e:	2200      	movs	r2, #0
 8005710:	e016      	b.n	8005740 <__kernel_rem_pio2f+0xa4>
 8005712:	2100      	movs	r1, #0
 8005714:	e7d7      	b.n	80056c6 <__kernel_rem_pio2f+0x2a>
 8005716:	42d8      	cmn	r0, r3
 8005718:	bf5d      	ittte	pl
 800571a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800571e:	ee07 2a90 	vmovpl	s15, r2
 8005722:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005726:	eef0 7a47 	vmovmi.f32	s15, s14
 800572a:	ecea 7a01 	vstmia	sl!, {s15}
 800572e:	3301      	adds	r3, #1
 8005730:	e7da      	b.n	80056e8 <__kernel_rem_pio2f+0x4c>
 8005732:	ecfe 6a01 	vldmia	lr!, {s13}
 8005736:	ed90 7a00 	vldr	s14, [r0]
 800573a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800573e:	3201      	adds	r2, #1
 8005740:	454a      	cmp	r2, r9
 8005742:	f1a0 0004 	sub.w	r0, r0, #4
 8005746:	ddf4      	ble.n	8005732 <__kernel_rem_pio2f+0x96>
 8005748:	ecea 7a01 	vstmia	sl!, {s15}
 800574c:	3304      	adds	r3, #4
 800574e:	f10c 0c01 	add.w	ip, ip, #1
 8005752:	e7d3      	b.n	80056fc <__kernel_rem_pio2f+0x60>
 8005754:	ab06      	add	r3, sp, #24
 8005756:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800575e:	eddf 8a92 	vldr	s17, [pc, #584]	; 80059a8 <__kernel_rem_pio2f+0x30c>
 8005762:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80059a4 <__kernel_rem_pio2f+0x308>
 8005766:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800576a:	9303      	str	r3, [sp, #12]
 800576c:	46ba      	mov	sl, r7
 800576e:	ab56      	add	r3, sp, #344	; 0x158
 8005770:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005774:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8005778:	ab06      	add	r3, sp, #24
 800577a:	4618      	mov	r0, r3
 800577c:	4652      	mov	r2, sl
 800577e:	2a00      	cmp	r2, #0
 8005780:	dc51      	bgt.n	8005826 <__kernel_rem_pio2f+0x18a>
 8005782:	4620      	mov	r0, r4
 8005784:	9305      	str	r3, [sp, #20]
 8005786:	f000 faa5 	bl	8005cd4 <scalbnf>
 800578a:	eeb0 8a40 	vmov.f32	s16, s0
 800578e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8005792:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005796:	f000 fa5b 	bl	8005c50 <floorf>
 800579a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800579e:	eea0 8a67 	vfms.f32	s16, s0, s15
 80057a2:	2c00      	cmp	r4, #0
 80057a4:	9b05      	ldr	r3, [sp, #20]
 80057a6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80057aa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80057ae:	edcd 7a00 	vstr	s15, [sp]
 80057b2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80057b6:	dd4b      	ble.n	8005850 <__kernel_rem_pio2f+0x1b4>
 80057b8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80057bc:	aa06      	add	r2, sp, #24
 80057be:	f1c4 0e08 	rsb	lr, r4, #8
 80057c2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80057c6:	ee17 1a90 	vmov	r1, s15
 80057ca:	fa42 f00e 	asr.w	r0, r2, lr
 80057ce:	4401      	add	r1, r0
 80057d0:	9100      	str	r1, [sp, #0]
 80057d2:	fa00 f00e 	lsl.w	r0, r0, lr
 80057d6:	a906      	add	r1, sp, #24
 80057d8:	1a12      	subs	r2, r2, r0
 80057da:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80057de:	f1c4 0007 	rsb	r0, r4, #7
 80057e2:	fa42 fb00 	asr.w	fp, r2, r0
 80057e6:	f1bb 0f00 	cmp.w	fp, #0
 80057ea:	dd43      	ble.n	8005874 <__kernel_rem_pio2f+0x1d8>
 80057ec:	9a00      	ldr	r2, [sp, #0]
 80057ee:	f04f 0e00 	mov.w	lr, #0
 80057f2:	3201      	adds	r2, #1
 80057f4:	9200      	str	r2, [sp, #0]
 80057f6:	4670      	mov	r0, lr
 80057f8:	45f2      	cmp	sl, lr
 80057fa:	dc6c      	bgt.n	80058d6 <__kernel_rem_pio2f+0x23a>
 80057fc:	2c00      	cmp	r4, #0
 80057fe:	dd04      	ble.n	800580a <__kernel_rem_pio2f+0x16e>
 8005800:	2c01      	cmp	r4, #1
 8005802:	d079      	beq.n	80058f8 <__kernel_rem_pio2f+0x25c>
 8005804:	2c02      	cmp	r4, #2
 8005806:	f000 8082 	beq.w	800590e <__kernel_rem_pio2f+0x272>
 800580a:	f1bb 0f02 	cmp.w	fp, #2
 800580e:	d131      	bne.n	8005874 <__kernel_rem_pio2f+0x1d8>
 8005810:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005814:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005818:	b360      	cbz	r0, 8005874 <__kernel_rem_pio2f+0x1d8>
 800581a:	4620      	mov	r0, r4
 800581c:	f000 fa5a 	bl	8005cd4 <scalbnf>
 8005820:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005824:	e026      	b.n	8005874 <__kernel_rem_pio2f+0x1d8>
 8005826:	ee60 7a28 	vmul.f32	s15, s0, s17
 800582a:	3a01      	subs	r2, #1
 800582c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005830:	a942      	add	r1, sp, #264	; 0x108
 8005832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005836:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800583a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800583e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005842:	eca0 0a01 	vstmia	r0!, {s0}
 8005846:	ed9c 0a00 	vldr	s0, [ip]
 800584a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800584e:	e796      	b.n	800577e <__kernel_rem_pio2f+0xe2>
 8005850:	d107      	bne.n	8005862 <__kernel_rem_pio2f+0x1c6>
 8005852:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005856:	a906      	add	r1, sp, #24
 8005858:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800585c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8005860:	e7c1      	b.n	80057e6 <__kernel_rem_pio2f+0x14a>
 8005862:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005866:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800586a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586e:	da2f      	bge.n	80058d0 <__kernel_rem_pio2f+0x234>
 8005870:	f04f 0b00 	mov.w	fp, #0
 8005874:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587c:	f040 8098 	bne.w	80059b0 <__kernel_rem_pio2f+0x314>
 8005880:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005884:	469c      	mov	ip, r3
 8005886:	2200      	movs	r2, #0
 8005888:	45bc      	cmp	ip, r7
 800588a:	da48      	bge.n	800591e <__kernel_rem_pio2f+0x282>
 800588c:	2a00      	cmp	r2, #0
 800588e:	d05f      	beq.n	8005950 <__kernel_rem_pio2f+0x2b4>
 8005890:	aa06      	add	r2, sp, #24
 8005892:	3c08      	subs	r4, #8
 8005894:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005898:	2900      	cmp	r1, #0
 800589a:	d07d      	beq.n	8005998 <__kernel_rem_pio2f+0x2fc>
 800589c:	4620      	mov	r0, r4
 800589e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	f000 fa16 	bl	8005cd4 <scalbnf>
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80059a8 <__kernel_rem_pio2f+0x30c>
 80058ae:	4619      	mov	r1, r3
 80058b0:	2900      	cmp	r1, #0
 80058b2:	f280 80af 	bge.w	8005a14 <__kernel_rem_pio2f+0x378>
 80058b6:	4618      	mov	r0, r3
 80058b8:	2400      	movs	r4, #0
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f2c0 80d0 	blt.w	8005a60 <__kernel_rem_pio2f+0x3c4>
 80058c0:	a942      	add	r1, sp, #264	; 0x108
 80058c2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80058c6:	4a36      	ldr	r2, [pc, #216]	; (80059a0 <__kernel_rem_pio2f+0x304>)
 80058c8:	eddf 7a38 	vldr	s15, [pc, #224]	; 80059ac <__kernel_rem_pio2f+0x310>
 80058cc:	2100      	movs	r1, #0
 80058ce:	e0bb      	b.n	8005a48 <__kernel_rem_pio2f+0x3ac>
 80058d0:	f04f 0b02 	mov.w	fp, #2
 80058d4:	e78a      	b.n	80057ec <__kernel_rem_pio2f+0x150>
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	b948      	cbnz	r0, 80058ee <__kernel_rem_pio2f+0x252>
 80058da:	b11a      	cbz	r2, 80058e4 <__kernel_rem_pio2f+0x248>
 80058dc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f10e 0e01 	add.w	lr, lr, #1
 80058e8:	3304      	adds	r3, #4
 80058ea:	4610      	mov	r0, r2
 80058ec:	e784      	b.n	80057f8 <__kernel_rem_pio2f+0x15c>
 80058ee:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	4602      	mov	r2, r0
 80058f6:	e7f5      	b.n	80058e4 <__kernel_rem_pio2f+0x248>
 80058f8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80058fc:	ab06      	add	r3, sp, #24
 80058fe:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005906:	aa06      	add	r2, sp, #24
 8005908:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800590c:	e77d      	b.n	800580a <__kernel_rem_pio2f+0x16e>
 800590e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005912:	ab06      	add	r3, sp, #24
 8005914:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800591c:	e7f3      	b.n	8005906 <__kernel_rem_pio2f+0x26a>
 800591e:	a906      	add	r1, sp, #24
 8005920:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8005924:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005928:	4302      	orrs	r2, r0
 800592a:	e7ad      	b.n	8005888 <__kernel_rem_pio2f+0x1ec>
 800592c:	3001      	adds	r0, #1
 800592e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005932:	2a00      	cmp	r2, #0
 8005934:	d0fa      	beq.n	800592c <__kernel_rem_pio2f+0x290>
 8005936:	a91a      	add	r1, sp, #104	; 0x68
 8005938:	eb0a 0208 	add.w	r2, sl, r8
 800593c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005940:	f10a 0301 	add.w	r3, sl, #1
 8005944:	eb0a 0100 	add.w	r1, sl, r0
 8005948:	4299      	cmp	r1, r3
 800594a:	da04      	bge.n	8005956 <__kernel_rem_pio2f+0x2ba>
 800594c:	468a      	mov	sl, r1
 800594e:	e70e      	b.n	800576e <__kernel_rem_pio2f+0xd2>
 8005950:	9b04      	ldr	r3, [sp, #16]
 8005952:	2001      	movs	r0, #1
 8005954:	e7eb      	b.n	800592e <__kernel_rem_pio2f+0x292>
 8005956:	9803      	ldr	r0, [sp, #12]
 8005958:	f8dd c004 	ldr.w	ip, [sp, #4]
 800595c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005960:	9000      	str	r0, [sp, #0]
 8005962:	ee07 0a90 	vmov	s15, r0
 8005966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800596a:	2000      	movs	r0, #0
 800596c:	ece2 7a01 	vstmia	r2!, {s15}
 8005970:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80059ac <__kernel_rem_pio2f+0x310>
 8005974:	4696      	mov	lr, r2
 8005976:	4548      	cmp	r0, r9
 8005978:	dd06      	ble.n	8005988 <__kernel_rem_pio2f+0x2ec>
 800597a:	a842      	add	r0, sp, #264	; 0x108
 800597c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005980:	edc0 7a00 	vstr	s15, [r0]
 8005984:	3301      	adds	r3, #1
 8005986:	e7df      	b.n	8005948 <__kernel_rem_pio2f+0x2ac>
 8005988:	ecfc 6a01 	vldmia	ip!, {s13}
 800598c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8005990:	3001      	adds	r0, #1
 8005992:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005996:	e7ee      	b.n	8005976 <__kernel_rem_pio2f+0x2da>
 8005998:	3b01      	subs	r3, #1
 800599a:	e779      	b.n	8005890 <__kernel_rem_pio2f+0x1f4>
 800599c:	080061b4 	.word	0x080061b4
 80059a0:	08006188 	.word	0x08006188
 80059a4:	43800000 	.word	0x43800000
 80059a8:	3b800000 	.word	0x3b800000
 80059ac:	00000000 	.word	0x00000000
 80059b0:	9b02      	ldr	r3, [sp, #8]
 80059b2:	eeb0 0a48 	vmov.f32	s0, s16
 80059b6:	1b98      	subs	r0, r3, r6
 80059b8:	f000 f98c 	bl	8005cd4 <scalbnf>
 80059bc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80059a4 <__kernel_rem_pio2f+0x308>
 80059c0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80059c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c8:	db1b      	blt.n	8005a02 <__kernel_rem_pio2f+0x366>
 80059ca:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80059a8 <__kernel_rem_pio2f+0x30c>
 80059ce:	ee60 7a27 	vmul.f32	s15, s0, s15
 80059d2:	aa06      	add	r2, sp, #24
 80059d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059d8:	a906      	add	r1, sp, #24
 80059da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059de:	3408      	adds	r4, #8
 80059e0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80059e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80059ec:	ee10 3a10 	vmov	r3, s0
 80059f0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80059f4:	ee17 2a90 	vmov	r2, s15
 80059f8:	f10a 0301 	add.w	r3, sl, #1
 80059fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a00:	e74c      	b.n	800589c <__kernel_rem_pio2f+0x200>
 8005a02:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005a06:	aa06      	add	r2, sp, #24
 8005a08:	ee10 3a10 	vmov	r3, s0
 8005a0c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8005a10:	4653      	mov	r3, sl
 8005a12:	e743      	b.n	800589c <__kernel_rem_pio2f+0x200>
 8005a14:	aa42      	add	r2, sp, #264	; 0x108
 8005a16:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8005a1a:	aa06      	add	r2, sp, #24
 8005a1c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005a20:	9201      	str	r2, [sp, #4]
 8005a22:	ee07 2a90 	vmov	s15, r2
 8005a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2a:	3901      	subs	r1, #1
 8005a2c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005a30:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005a34:	edc0 7a00 	vstr	s15, [r0]
 8005a38:	e73a      	b.n	80058b0 <__kernel_rem_pio2f+0x214>
 8005a3a:	ecf2 6a01 	vldmia	r2!, {s13}
 8005a3e:	ecb6 7a01 	vldmia	r6!, {s14}
 8005a42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005a46:	3101      	adds	r1, #1
 8005a48:	42b9      	cmp	r1, r7
 8005a4a:	dc01      	bgt.n	8005a50 <__kernel_rem_pio2f+0x3b4>
 8005a4c:	428c      	cmp	r4, r1
 8005a4e:	daf4      	bge.n	8005a3a <__kernel_rem_pio2f+0x39e>
 8005a50:	aa56      	add	r2, sp, #344	; 0x158
 8005a52:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8005a56:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8005a5a:	3801      	subs	r0, #1
 8005a5c:	3401      	adds	r4, #1
 8005a5e:	e72c      	b.n	80058ba <__kernel_rem_pio2f+0x21e>
 8005a60:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005a62:	2a02      	cmp	r2, #2
 8005a64:	dc0a      	bgt.n	8005a7c <__kernel_rem_pio2f+0x3e0>
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	dc61      	bgt.n	8005b2e <__kernel_rem_pio2f+0x492>
 8005a6a:	d03c      	beq.n	8005ae6 <__kernel_rem_pio2f+0x44a>
 8005a6c:	9b00      	ldr	r3, [sp, #0]
 8005a6e:	f003 0007 	and.w	r0, r3, #7
 8005a72:	b057      	add	sp, #348	; 0x15c
 8005a74:	ecbd 8b04 	vpop	{d8-d9}
 8005a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005a7e:	2a03      	cmp	r2, #3
 8005a80:	d1f4      	bne.n	8005a6c <__kernel_rem_pio2f+0x3d0>
 8005a82:	aa2e      	add	r2, sp, #184	; 0xb8
 8005a84:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005a88:	4608      	mov	r0, r1
 8005a8a:	461c      	mov	r4, r3
 8005a8c:	2c00      	cmp	r4, #0
 8005a8e:	f1a0 0004 	sub.w	r0, r0, #4
 8005a92:	dc59      	bgt.n	8005b48 <__kernel_rem_pio2f+0x4ac>
 8005a94:	4618      	mov	r0, r3
 8005a96:	2801      	cmp	r0, #1
 8005a98:	f1a1 0104 	sub.w	r1, r1, #4
 8005a9c:	dc64      	bgt.n	8005b68 <__kernel_rem_pio2f+0x4cc>
 8005a9e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80059ac <__kernel_rem_pio2f+0x310>
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	dc70      	bgt.n	8005b88 <__kernel_rem_pio2f+0x4ec>
 8005aa6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005aaa:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8005aae:	f1bb 0f00 	cmp.w	fp, #0
 8005ab2:	d172      	bne.n	8005b9a <__kernel_rem_pio2f+0x4fe>
 8005ab4:	edc5 6a00 	vstr	s13, [r5]
 8005ab8:	ed85 7a01 	vstr	s14, [r5, #4]
 8005abc:	edc5 7a02 	vstr	s15, [r5, #8]
 8005ac0:	e7d4      	b.n	8005a6c <__kernel_rem_pio2f+0x3d0>
 8005ac2:	aa2e      	add	r2, sp, #184	; 0xb8
 8005ac4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005ac8:	ed91 7a00 	vldr	s14, [r1]
 8005acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	daf5      	bge.n	8005ac2 <__kernel_rem_pio2f+0x426>
 8005ad6:	f1bb 0f00 	cmp.w	fp, #0
 8005ada:	d001      	beq.n	8005ae0 <__kernel_rem_pio2f+0x444>
 8005adc:	eef1 7a67 	vneg.f32	s15, s15
 8005ae0:	edc5 7a00 	vstr	s15, [r5]
 8005ae4:	e7c2      	b.n	8005a6c <__kernel_rem_pio2f+0x3d0>
 8005ae6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80059ac <__kernel_rem_pio2f+0x310>
 8005aea:	e7f2      	b.n	8005ad2 <__kernel_rem_pio2f+0x436>
 8005aec:	aa2e      	add	r2, sp, #184	; 0xb8
 8005aee:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8005af2:	edd0 7a00 	vldr	s15, [r0]
 8005af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005afa:	3901      	subs	r1, #1
 8005afc:	2900      	cmp	r1, #0
 8005afe:	daf5      	bge.n	8005aec <__kernel_rem_pio2f+0x450>
 8005b00:	f1bb 0f00 	cmp.w	fp, #0
 8005b04:	d017      	beq.n	8005b36 <__kernel_rem_pio2f+0x49a>
 8005b06:	eef1 7a47 	vneg.f32	s15, s14
 8005b0a:	edc5 7a00 	vstr	s15, [r5]
 8005b0e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8005b12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b16:	a82f      	add	r0, sp, #188	; 0xbc
 8005b18:	2101      	movs	r1, #1
 8005b1a:	428b      	cmp	r3, r1
 8005b1c:	da0e      	bge.n	8005b3c <__kernel_rem_pio2f+0x4a0>
 8005b1e:	f1bb 0f00 	cmp.w	fp, #0
 8005b22:	d001      	beq.n	8005b28 <__kernel_rem_pio2f+0x48c>
 8005b24:	eef1 7a67 	vneg.f32	s15, s15
 8005b28:	edc5 7a01 	vstr	s15, [r5, #4]
 8005b2c:	e79e      	b.n	8005a6c <__kernel_rem_pio2f+0x3d0>
 8005b2e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80059ac <__kernel_rem_pio2f+0x310>
 8005b32:	4619      	mov	r1, r3
 8005b34:	e7e2      	b.n	8005afc <__kernel_rem_pio2f+0x460>
 8005b36:	eef0 7a47 	vmov.f32	s15, s14
 8005b3a:	e7e6      	b.n	8005b0a <__kernel_rem_pio2f+0x46e>
 8005b3c:	ecb0 7a01 	vldmia	r0!, {s14}
 8005b40:	3101      	adds	r1, #1
 8005b42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b46:	e7e8      	b.n	8005b1a <__kernel_rem_pio2f+0x47e>
 8005b48:	edd0 7a00 	vldr	s15, [r0]
 8005b4c:	edd0 6a01 	vldr	s13, [r0, #4]
 8005b50:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005b54:	3c01      	subs	r4, #1
 8005b56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b5a:	ed80 7a00 	vstr	s14, [r0]
 8005b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b62:	edc0 7a01 	vstr	s15, [r0, #4]
 8005b66:	e791      	b.n	8005a8c <__kernel_rem_pio2f+0x3f0>
 8005b68:	edd1 7a00 	vldr	s15, [r1]
 8005b6c:	edd1 6a01 	vldr	s13, [r1, #4]
 8005b70:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005b74:	3801      	subs	r0, #1
 8005b76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b7a:	ed81 7a00 	vstr	s14, [r1]
 8005b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b82:	edc1 7a01 	vstr	s15, [r1, #4]
 8005b86:	e786      	b.n	8005a96 <__kernel_rem_pio2f+0x3fa>
 8005b88:	aa2e      	add	r2, sp, #184	; 0xb8
 8005b8a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005b8e:	ed91 7a00 	vldr	s14, [r1]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b98:	e783      	b.n	8005aa2 <__kernel_rem_pio2f+0x406>
 8005b9a:	eef1 6a66 	vneg.f32	s13, s13
 8005b9e:	eeb1 7a47 	vneg.f32	s14, s14
 8005ba2:	edc5 6a00 	vstr	s13, [r5]
 8005ba6:	ed85 7a01 	vstr	s14, [r5, #4]
 8005baa:	eef1 7a67 	vneg.f32	s15, s15
 8005bae:	e785      	b.n	8005abc <__kernel_rem_pio2f+0x420>

08005bb0 <__kernel_sinf>:
 8005bb0:	ee10 3a10 	vmov	r3, s0
 8005bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005bbc:	da04      	bge.n	8005bc8 <__kernel_sinf+0x18>
 8005bbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005bc2:	ee17 3a90 	vmov	r3, s15
 8005bc6:	b35b      	cbz	r3, 8005c20 <__kernel_sinf+0x70>
 8005bc8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005bcc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005c24 <__kernel_sinf+0x74>
 8005bd0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005c28 <__kernel_sinf+0x78>
 8005bd4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005bd8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005c2c <__kernel_sinf+0x7c>
 8005bdc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005be0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005c30 <__kernel_sinf+0x80>
 8005be4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005be8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005c34 <__kernel_sinf+0x84>
 8005bec:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005bf0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005bf4:	b930      	cbnz	r0, 8005c04 <__kernel_sinf+0x54>
 8005bf6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005c38 <__kernel_sinf+0x88>
 8005bfa:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005bfe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005c02:	4770      	bx	lr
 8005c04:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005c08:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005c0c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005c10:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005c14:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005c3c <__kernel_sinf+0x8c>
 8005c18:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005c1c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	2f2ec9d3 	.word	0x2f2ec9d3
 8005c28:	b2d72f34 	.word	0xb2d72f34
 8005c2c:	3638ef1b 	.word	0x3638ef1b
 8005c30:	b9500d01 	.word	0xb9500d01
 8005c34:	3c088889 	.word	0x3c088889
 8005c38:	be2aaaab 	.word	0xbe2aaaab
 8005c3c:	3e2aaaab 	.word	0x3e2aaaab

08005c40 <fabsf>:
 8005c40:	ee10 3a10 	vmov	r3, s0
 8005c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c48:	ee00 3a10 	vmov	s0, r3
 8005c4c:	4770      	bx	lr
	...

08005c50 <floorf>:
 8005c50:	ee10 3a10 	vmov	r3, s0
 8005c54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005c58:	3a7f      	subs	r2, #127	; 0x7f
 8005c5a:	2a16      	cmp	r2, #22
 8005c5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005c60:	dc2a      	bgt.n	8005cb8 <floorf+0x68>
 8005c62:	2a00      	cmp	r2, #0
 8005c64:	da11      	bge.n	8005c8a <floorf+0x3a>
 8005c66:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005cc8 <floorf+0x78>
 8005c6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c76:	dd05      	ble.n	8005c84 <floorf+0x34>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	da23      	bge.n	8005cc4 <floorf+0x74>
 8005c7c:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <floorf+0x7c>)
 8005c7e:	2900      	cmp	r1, #0
 8005c80:	bf18      	it	ne
 8005c82:	4613      	movne	r3, r2
 8005c84:	ee00 3a10 	vmov	s0, r3
 8005c88:	4770      	bx	lr
 8005c8a:	4911      	ldr	r1, [pc, #68]	; (8005cd0 <floorf+0x80>)
 8005c8c:	4111      	asrs	r1, r2
 8005c8e:	420b      	tst	r3, r1
 8005c90:	d0fa      	beq.n	8005c88 <floorf+0x38>
 8005c92:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005cc8 <floorf+0x78>
 8005c96:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca2:	ddef      	ble.n	8005c84 <floorf+0x34>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bfbe      	ittt	lt
 8005ca8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005cac:	fa40 f202 	asrlt.w	r2, r0, r2
 8005cb0:	189b      	addlt	r3, r3, r2
 8005cb2:	ea23 0301 	bic.w	r3, r3, r1
 8005cb6:	e7e5      	b.n	8005c84 <floorf+0x34>
 8005cb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005cbc:	d3e4      	bcc.n	8005c88 <floorf+0x38>
 8005cbe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cc2:	4770      	bx	lr
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e7dd      	b.n	8005c84 <floorf+0x34>
 8005cc8:	7149f2ca 	.word	0x7149f2ca
 8005ccc:	bf800000 	.word	0xbf800000
 8005cd0:	007fffff 	.word	0x007fffff

08005cd4 <scalbnf>:
 8005cd4:	ee10 3a10 	vmov	r3, s0
 8005cd8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005cdc:	d025      	beq.n	8005d2a <scalbnf+0x56>
 8005cde:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005ce2:	d302      	bcc.n	8005cea <scalbnf+0x16>
 8005ce4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005ce8:	4770      	bx	lr
 8005cea:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005cee:	d122      	bne.n	8005d36 <scalbnf+0x62>
 8005cf0:	4b2a      	ldr	r3, [pc, #168]	; (8005d9c <scalbnf+0xc8>)
 8005cf2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005da0 <scalbnf+0xcc>
 8005cf6:	4298      	cmp	r0, r3
 8005cf8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005cfc:	db16      	blt.n	8005d2c <scalbnf+0x58>
 8005cfe:	ee10 3a10 	vmov	r3, s0
 8005d02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005d06:	3a19      	subs	r2, #25
 8005d08:	4402      	add	r2, r0
 8005d0a:	2afe      	cmp	r2, #254	; 0xfe
 8005d0c:	dd15      	ble.n	8005d3a <scalbnf+0x66>
 8005d0e:	ee10 3a10 	vmov	r3, s0
 8005d12:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005da4 <scalbnf+0xd0>
 8005d16:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005da8 <scalbnf+0xd4>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	eeb0 7a67 	vmov.f32	s14, s15
 8005d20:	bfb8      	it	lt
 8005d22:	eef0 7a66 	vmovlt.f32	s15, s13
 8005d26:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005d2a:	4770      	bx	lr
 8005d2c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005dac <scalbnf+0xd8>
 8005d30:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d34:	4770      	bx	lr
 8005d36:	0dd2      	lsrs	r2, r2, #23
 8005d38:	e7e6      	b.n	8005d08 <scalbnf+0x34>
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	dd06      	ble.n	8005d4c <scalbnf+0x78>
 8005d3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d42:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005d46:	ee00 3a10 	vmov	s0, r3
 8005d4a:	4770      	bx	lr
 8005d4c:	f112 0f16 	cmn.w	r2, #22
 8005d50:	da1a      	bge.n	8005d88 <scalbnf+0xb4>
 8005d52:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005d56:	4298      	cmp	r0, r3
 8005d58:	ee10 3a10 	vmov	r3, s0
 8005d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	dd0a      	ble.n	8005d78 <scalbnf+0xa4>
 8005d62:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005da4 <scalbnf+0xd0>
 8005d66:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005da8 <scalbnf+0xd4>
 8005d6a:	eef0 7a40 	vmov.f32	s15, s0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf18      	it	ne
 8005d72:	eeb0 0a47 	vmovne.f32	s0, s14
 8005d76:	e7db      	b.n	8005d30 <scalbnf+0x5c>
 8005d78:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005dac <scalbnf+0xd8>
 8005d7c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005db0 <scalbnf+0xdc>
 8005d80:	eef0 7a40 	vmov.f32	s15, s0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	e7f3      	b.n	8005d70 <scalbnf+0x9c>
 8005d88:	3219      	adds	r2, #25
 8005d8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d8e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005d92:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005db4 <scalbnf+0xe0>
 8005d96:	ee07 3a10 	vmov	s14, r3
 8005d9a:	e7c4      	b.n	8005d26 <scalbnf+0x52>
 8005d9c:	ffff3cb0 	.word	0xffff3cb0
 8005da0:	4c000000 	.word	0x4c000000
 8005da4:	7149f2ca 	.word	0x7149f2ca
 8005da8:	f149f2ca 	.word	0xf149f2ca
 8005dac:	0da24260 	.word	0x0da24260
 8005db0:	8da24260 	.word	0x8da24260
 8005db4:	33000000 	.word	0x33000000

08005db8 <_init>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr

08005dc4 <_fini>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr
